{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faust\\\\Desktop\\\\PrograWebTG3\\\\src\\\\components\\\\Popular\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from '../../axios';\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport \"./row.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl); //console.log(request);\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get(\"v\"));\n      }).catch(error => console.log(error));\n    }\n  }; //console.log(movies);\n  //console.table(movies);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 23\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/faust/Desktop/PrograWebTG3/src/components/Popular/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","backdrop_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAO,WAAP;;AACA,MAAMC,QAAQ,GAAG,sCAAjB;;AAEA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAb,EAA4C;AAAA;;AACxC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAK,CAACY,UAAD,EAAaC,aAAb,IAA6Bb,QAAQ,CAAC,EAAD,CAA1C;AACJC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAea,SAAf,GAA0B;AACtB,YAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUR,QAAV,CAAtB,CADsB,CAEtB;;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GARQ,EAQP,CAACN,QAAD,CARO,CAAT;AASA,QAAMW,IAAI,GAAG;AACZC,IAAAA,MAAM,EAAC,KADK;AAEZC,IAAAA,KAAK,EAAC,MAFM;AAGZC,IAAAA,UAAU,EAAE;AACTC,MAAAA,QAAQ,EAAE;AADD;AAHA,GAAb;;AAOA,QAAMC,WAAW,GAAIC,KAAD,IAAU;AAC1B,QAAIb,UAAJ,EAAe;AACXC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH,KAFD,MAEK;AACDT,MAAAA,YAAY,CAAC,CAAAqB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAe,EAAhB,CAAZ,CACCC,IADD,CACMC,GAAG,IAAG;AACR,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAqB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAlC,CAAlB;AACAnB,QAAAA,aAAa,CAACgB,SAAS,CAACb,GAAV,CAAc,GAAd,CAAD,CAAb;AACH,OAJD,EAKCiB,KALD,CAKQC,KAAD,IAAUC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CALjB;AAMH;AACJ,GAXD,CAnB4C,CA+B5C;AACA;;;AAEI,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBAEGxB,MAAM,CAAC2B,GAAP,CAAWZ,KAAK,iBAET;AAEE,QAAA,OAAO,EAAE,MAAKD,WAAW,CAACC,KAAD,CAF3B;AAGE,QAAA,SAAS,EAAG,eAAchB,UAAU,IAAI,kBAAmB,EAH7D;AAIE,QAAA,GAAG,EAAG,GAAEJ,QAAS,GACbI,UAAU,GAAGgB,KAAK,CAACa,WAAT,GAAsBb,KAAK,CAACc,aACzC,EANH;AAOE,QAAA,GAAG,EAAEd,KAAK,CAACC;AAPb,SACOD,KAAK,CAACe,EADb;AAAA;AAAA;AAAA;AAAA,cAFP;AAFH;AAAA;AAAA;AAAA;AAAA,YAFJ,EAkBM5B,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEO;AAApC;AAAA;AAAA;AAAA;AAAA,YAlBpB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH;;GAxDQb,G;;KAAAA,G;AA0DT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport axios from '../../axios';\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\nimport \"./row.css\";\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}) {\r\n    const [movies, setMovies] = useState([]);\r\n    const[trailerUrl, setTrailerUrl]= useState(\"\");\r\nuseEffect(() => {\r\n    async function fetchData(){\r\n        const request = await axios.get(fetchUrl);\r\n        //console.log(request);\r\n        setMovies(request.data.results);\r\n        return request;\r\n    }\r\n    fetchData();\r\n},[fetchUrl]);\r\nconst opts = {\r\n height:\"390\",\r\n width:\"100%\",\r\n playerVars: {\r\n    autoplay: 1,\r\n },\r\n};\r\nconst handleClick = (movie) =>{\r\n    if (trailerUrl){\r\n        setTrailerUrl(\"\");\r\n    }else{\r\n        movieTrailer(movie?.name || \"\")\r\n        .then(url =>{\r\n            const urlParams = new URLSearchParams (new URL(url).search);\r\n            setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error)=> console.log(error))\r\n    }\r\n}\r\n//console.log(movies);\r\n//console.table(movies);\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            \r\n            <div className=\"row__posters\">\r\n              \r\n              {movies.map(movie => (\r\n                  \r\n                      <img \r\n                        key={movie.id}\r\n                        onClick={()=> handleClick(movie)}\r\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                        src={`${base_url}${\r\n                            isLargeRow ? movie.poster_path: movie.backdrop_path\r\n                        }`} \r\n                        alt={movie.name}\r\n                        />\r\n                  \r\n              ))}\r\n            </div>\r\n            { trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row"]},"metadata":{},"sourceType":"module"}