{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { getModularInstance } from '@firebase/util';\nimport { Bytes, enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence, clearIndexedDbPersistence, connectFirestoreEmulator, enableNetwork, disableNetwork, waitForPendingWrites, onSnapshotsInSync, collection, doc, collectionGroup, runTransaction, ensureFirestoreConfigured, WriteBatch as WriteBatch$1, executeWrite, DocumentSnapshot as DocumentSnapshot$1, DocumentReference as DocumentReference$1, refEqual, setDoc, updateDoc, deleteDoc, onSnapshot, getDocFromCache, getDocFromServer, getDoc, snapshotEqual, query, where, orderBy, limit, limitToLast, startAt, startAfter, endBefore, endAt, queryEqual, getDocsFromCache, getDocsFromServer, getDocs, QuerySnapshot as QuerySnapshot$1, addDoc, AbstractUserDataWriter, QueryDocumentSnapshot as QueryDocumentSnapshot$1, loadBundle as loadBundle$1, namedQuery as namedQuery$1, FieldPath as FieldPath$2, serverTimestamp, deleteField, arrayUnion, arrayRemove, increment, GeoPoint, Timestamp, CACHE_SIZE_UNLIMITED } from '@firebase/firestore';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** The default database name for a project. */\n\nconst DEFAULT_DATABASE_NAME = '(default)';\n/** Represents the database ID a Firestore client is associated with. */\n\nclass DatabaseId {\n  constructor(projectId, database) {\n    this.projectId = projectId;\n    this.database = database ? database : DEFAULT_DATABASE_NAME;\n  }\n\n  get isDefaultDatabase() {\n    return this.database === DEFAULT_DATABASE_NAME;\n  }\n\n  isEqual(other) {\n    return other instanceof DatabaseId && other.projectId === this.projectId && other.database === this.database;\n  }\n\n}\n\nconst version$1 = \"8.7.1\";\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nlet SDK_VERSION = version$1;\n\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Formats an object as a JSON string, suitable for logging. */\n\n\nfunction formatJSON(value) {\n  return JSON.stringify(value);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst logClient = new Logger('@firebase/firestore');\n/**\r\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\r\n *\r\n * @param logLevel - The verbosity you set for activity and error logging. Can\r\n *   be any of the following values:\r\n *\r\n *   <ul>\r\n *     <li>`debug` for the most verbose logging level, primarily for\r\n *     debugging.</li>\r\n *     <li>`error` to log errors only.</li>\r\n *     <li><code>`silent` to turn off logging.</li>\r\n *   </ul>\r\n */\n\nfunction setLogLevel$1(logLevel) {\n  logClient.setLogLevel(logLevel);\n}\n\nfunction logError(msg, ...obj) {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    const args = obj.map(argToString);\n    logClient.error(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nfunction logWarn(msg, ...obj) {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    const args = obj.map(argToString);\n    logClient.warn(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n/**\r\n * Converts an additional log parameter to a string representation.\r\n */\n\n\nfunction argToString(obj) {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    try {\n      return formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Unconditionally fails, throwing an Error with the given message.\r\n * Messages are stripped in production builds.\r\n *\r\n * Returns `never` and can be used in expressions:\r\n * @example\r\n * let futureVar = fail('not implemented yet');\r\n */\n\n\nfunction fail(failure = 'Unexpected state') {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message = `FIRESTORE (${SDK_VERSION}) INTERNAL ASSERTION FAILED: ` + failure;\n  logError(message); // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n\n  throw new Error(message);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst Code = {\n  // Causes are copied from:\n  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n\n  /** Not an error; returned on success. */\n  OK: 'ok',\n\n  /** The operation was cancelled (typically by the caller). */\n  CANCELLED: 'cancelled',\n\n  /** Unknown error or an error from a different error domain. */\n  UNKNOWN: 'unknown',\n\n  /**\r\n   * Client specified an invalid argument. Note that this differs from\r\n   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\r\n   * problematic regardless of the state of the system (e.g., a malformed file\r\n   * name).\r\n   */\n  INVALID_ARGUMENT: 'invalid-argument',\n\n  /**\r\n   * Deadline expired before operation could complete. For operations that\r\n   * change the state of the system, this error may be returned even if the\r\n   * operation has completed successfully. For example, a successful response\r\n   * from a server could have been delayed long enough for the deadline to\r\n   * expire.\r\n   */\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n\n  /** Some requested entity (e.g., file or directory) was not found. */\n  NOT_FOUND: 'not-found',\n\n  /**\r\n   * Some entity that we attempted to create (e.g., file or directory) already\r\n   * exists.\r\n   */\n  ALREADY_EXISTS: 'already-exists',\n\n  /**\r\n   * The caller does not have permission to execute the specified operation.\r\n   * PERMISSION_DENIED must not be used for rejections caused by exhausting\r\n   * some resource (use RESOURCE_EXHAUSTED instead for those errors).\r\n   * PERMISSION_DENIED must not be used if the caller can not be identified\r\n   * (use UNAUTHENTICATED instead for those errors).\r\n   */\n  PERMISSION_DENIED: 'permission-denied',\n\n  /**\r\n   * The request does not have valid authentication credentials for the\r\n   * operation.\r\n   */\n  UNAUTHENTICATED: 'unauthenticated',\n\n  /**\r\n   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\r\n   * entire file system is out of space.\r\n   */\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n\n  /**\r\n   * Operation was rejected because the system is not in a state required for\r\n   * the operation's execution. For example, directory to be deleted may be\r\n   * non-empty, an rmdir operation is applied to a non-directory, etc.\r\n   *\r\n   * A litmus test that may help a service implementor in deciding\r\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\r\n   *  (a) Use UNAVAILABLE if the client can retry just the failing call.\r\n   *  (b) Use ABORTED if the client should retry at a higher-level\r\n   *      (e.g., restarting a read-modify-write sequence).\r\n   *  (c) Use FAILED_PRECONDITION if the client should not retry until\r\n   *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\r\n   *      fails because the directory is non-empty, FAILED_PRECONDITION\r\n   *      should be returned since the client should not retry unless\r\n   *      they have first fixed up the directory by deleting files from it.\r\n   *  (d) Use FAILED_PRECONDITION if the client performs conditional\r\n   *      REST Get/Update/Delete on a resource and the resource on the\r\n   *      server does not match the condition. E.g., conflicting\r\n   *      read-modify-write on the same resource.\r\n   */\n  FAILED_PRECONDITION: 'failed-precondition',\n\n  /**\r\n   * The operation was aborted, typically due to a concurrency issue like\r\n   * sequencer check failures, transaction aborts, etc.\r\n   *\r\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\r\n   * and UNAVAILABLE.\r\n   */\n  ABORTED: 'aborted',\n\n  /**\r\n   * Operation was attempted past the valid range. E.g., seeking or reading\r\n   * past end of file.\r\n   *\r\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\r\n   * if the system state changes. For example, a 32-bit file system will\r\n   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\r\n   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\r\n   * an offset past the current file size.\r\n   *\r\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\r\n   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\r\n   * when it applies so that callers who are iterating through a space can\r\n   * easily look for an OUT_OF_RANGE error to detect when they are done.\r\n   */\n  OUT_OF_RANGE: 'out-of-range',\n\n  /** Operation is not implemented or not supported/enabled in this service. */\n  UNIMPLEMENTED: 'unimplemented',\n\n  /**\r\n   * Internal errors. Means some invariants expected by underlying System has\r\n   * been broken. If you see one of these errors, Something is very broken.\r\n   */\n  INTERNAL: 'internal',\n\n  /**\r\n   * The service is currently unavailable. This is a most likely a transient\r\n   * condition and may be corrected by retrying with a backoff.\r\n   *\r\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\r\n   * and UNAVAILABLE.\r\n   */\n  UNAVAILABLE: 'unavailable',\n\n  /** Unrecoverable data loss or corruption. */\n  DATA_LOSS: 'data-loss'\n};\n/** An error returned by a Firestore operation. */\n\nclass FirestoreError extends Error {\n  /** @hideconstructor */\n  constructor(\n  /**\r\n   * The backend error code associated with this error.\r\n   */\n  code,\n  /**\r\n   * A custom error description.\r\n   */\n  message) {\n    super(message);\n    this.code = code;\n    this.message = message;\n    /** The custom name for all FirestoreErrors. */\n\n    this.name = 'FirebaseError'; // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n\n    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DOCUMENT_KEY_NAME = '__name__';\n/**\r\n * Path represents an ordered sequence of string segments.\r\n */\n\nclass BasePath {\n  constructor(segments, offset, length) {\n    if (offset === undefined) {\n      offset = 0;\n    } else if (offset > segments.length) {\n      fail();\n    }\n\n    if (length === undefined) {\n      length = segments.length - offset;\n    } else if (length > segments.length - offset) {\n      fail();\n    }\n\n    this.segments = segments;\n    this.offset = offset;\n    this.len = length;\n  }\n\n  get length() {\n    return this.len;\n  }\n\n  isEqual(other) {\n    return BasePath.comparator(this, other) === 0;\n  }\n\n  child(nameOrPath) {\n    const segments = this.segments.slice(this.offset, this.limit());\n\n    if (nameOrPath instanceof BasePath) {\n      nameOrPath.forEach(segment => {\n        segments.push(segment);\n      });\n    } else {\n      segments.push(nameOrPath);\n    }\n\n    return this.construct(segments);\n  }\n  /** The index of one past the last segment of the path. */\n\n\n  limit() {\n    return this.offset + this.length;\n  }\n\n  popFirst(size) {\n    size = size === undefined ? 1 : size;\n    return this.construct(this.segments, this.offset + size, this.length - size);\n  }\n\n  popLast() {\n    return this.construct(this.segments, this.offset, this.length - 1);\n  }\n\n  firstSegment() {\n    return this.segments[this.offset];\n  }\n\n  lastSegment() {\n    return this.get(this.length - 1);\n  }\n\n  get(index) {\n    return this.segments[this.offset + index];\n  }\n\n  isEmpty() {\n    return this.length === 0;\n  }\n\n  isPrefixOf(other) {\n    if (other.length < this.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== other.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isImmediateParentOf(potentialChild) {\n    if (this.length + 1 !== potentialChild.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== potentialChild.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  forEach(fn) {\n    for (let i = this.offset, end = this.limit(); i < end; i++) {\n      fn(this.segments[i]);\n    }\n  }\n\n  toArray() {\n    return this.segments.slice(this.offset, this.limit());\n  }\n\n  static comparator(p1, p2) {\n    const len = Math.min(p1.length, p2.length);\n\n    for (let i = 0; i < len; i++) {\n      const left = p1.get(i);\n      const right = p2.get(i);\n\n      if (left < right) {\n        return -1;\n      }\n\n      if (left > right) {\n        return 1;\n      }\n    }\n\n    if (p1.length < p2.length) {\n      return -1;\n    }\n\n    if (p1.length > p2.length) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n}\n/**\r\n * A slash-separated path for navigating resources (documents and collections)\r\n * within Firestore.\r\n */\n\n\nclass ResourcePath extends BasePath {\n  construct(segments, offset, length) {\n    return new ResourcePath(segments, offset, length);\n  }\n\n  canonicalString() {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n    return this.toArray().join('/');\n  }\n\n  toString() {\n    return this.canonicalString();\n  }\n  /**\r\n   * Creates a resource path from the given slash-delimited string. If multiple\r\n   * arguments are provided, all components are combined. Leading and trailing\r\n   * slashes from all components are ignored.\r\n   */\n\n\n  static fromString(...pathComponents) {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n    const segments = [];\n\n    for (const path of pathComponents) {\n      if (path.indexOf('//') >= 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid segment (${path}). Paths must not contain // in them.`);\n      } // Strip leading and traling slashed.\n\n\n      segments.push(...path.split('/').filter(segment => segment.length > 0));\n    }\n\n    return new ResourcePath(segments);\n  }\n\n  static emptyPath() {\n    return new ResourcePath([]);\n  }\n\n}\n\nconst identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/** A dot-separated path for navigating sub-objects within a document. */\n\nclass FieldPath$1 extends BasePath {\n  construct(segments, offset, length) {\n    return new FieldPath$1(segments, offset, length);\n  }\n  /**\r\n   * Returns true if the string could be used as a segment in a field path\r\n   * without escaping.\r\n   */\n\n\n  static isValidIdentifier(segment) {\n    return identifierRegExp.test(segment);\n  }\n\n  canonicalString() {\n    return this.toArray().map(str => {\n      str = str.replace(/\\\\/g, '\\\\\\\\').replace(/`/g, '\\\\`');\n\n      if (!FieldPath$1.isValidIdentifier(str)) {\n        str = '`' + str + '`';\n      }\n\n      return str;\n    }).join('.');\n  }\n\n  toString() {\n    return this.canonicalString();\n  }\n  /**\r\n   * Returns true if this field references the key of a document.\r\n   */\n\n\n  isKeyField() {\n    return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n  }\n  /**\r\n   * The field designating the key of a document.\r\n   */\n\n\n  static keyField() {\n    return new FieldPath$1([DOCUMENT_KEY_NAME]);\n  }\n  /**\r\n   * Parses a field string from the given server-formatted string.\r\n   *\r\n   * - Splitting the empty string is not allowed (for now at least).\r\n   * - Empty segments within the string (e.g. if there are two consecutive\r\n   *   separators) are not allowed.\r\n   *\r\n   * TODO(b/37244157): we should make this more strict. Right now, it allows\r\n   * non-identifier path components, even if they aren't escaped.\r\n   */\n\n\n  static fromServerFormat(path) {\n    const segments = [];\n    let current = '';\n    let i = 0;\n\n    const addCurrentSegment = () => {\n      if (current.length === 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid field path (${path}). Paths must not be empty, begin ` + `with '.', end with '.', or contain '..'`);\n      }\n\n      segments.push(current);\n      current = '';\n    };\n\n    let inBackticks = false;\n\n    while (i < path.length) {\n      const c = path[i];\n\n      if (c === '\\\\') {\n        if (i + 1 === path.length) {\n          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);\n        }\n\n        const next = path[i + 1];\n\n        if (!(next === '\\\\' || next === '.' || next === '`')) {\n          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);\n        }\n\n        current += next;\n        i += 2;\n      } else if (c === '`') {\n        inBackticks = !inBackticks;\n        i++;\n      } else if (c === '.' && !inBackticks) {\n        addCurrentSegment();\n        i++;\n      } else {\n        current += c;\n        i++;\n      }\n    }\n\n    addCurrentSegment();\n\n    if (inBackticks) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);\n    }\n\n    return new FieldPath$1(segments);\n  }\n\n  static emptyPath() {\n    return new FieldPath$1([]);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass DocumentKey {\n  constructor(path) {\n    this.path = path;\n  }\n\n  static fromPath(path) {\n    return new DocumentKey(ResourcePath.fromString(path));\n  }\n\n  static fromName(name) {\n    return new DocumentKey(ResourcePath.fromString(name).popFirst(5));\n  }\n  /** Returns true if the document is in the specified collectionId. */\n\n\n  hasCollectionId(collectionId) {\n    return this.path.length >= 2 && this.path.get(this.path.length - 2) === collectionId;\n  }\n\n  isEqual(other) {\n    return other !== null && ResourcePath.comparator(this.path, other.path) === 0;\n  }\n\n  toString() {\n    return this.path.toString();\n  }\n\n  static comparator(k1, k2) {\n    return ResourcePath.comparator(k1.path, k2.path);\n  }\n\n  static isDocumentKey(path) {\n    return path.length % 2 === 0;\n  }\n  /**\r\n   * Creates and returns a new document key with the given segments.\r\n   *\r\n   * @param segments - The segments of the path to the document\r\n   * @returns A new instance of DocumentKey\r\n   */\n\n\n  static fromSegments(segments) {\n    return new DocumentKey(new ResourcePath(segments.slice()));\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction validateSetOptions(methodName, options) {\n  if (options === undefined) {\n    return {\n      merge: false\n    };\n  }\n\n  if (options.mergeFields !== undefined && options.merge !== undefined) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid options passed to function ${methodName}(): You cannot ` + 'specify both \"merge\" and \"mergeFields\".');\n  }\n\n  return options;\n}\n/**\r\n * Validates that two boolean options are not set at the same time.\r\n */\n\n\nfunction validateIsNotUsedTogether(optionName1, argument1, optionName2, argument2) {\n  if (argument1 === true && argument2 === true) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `${optionName1} and ${optionName2} cannot be used together.`);\n  }\n}\n/** Returns a string describing the type / value of the provided input. */\n\n\nfunction valueDescription(input) {\n  if (input === undefined) {\n    return 'undefined';\n  } else if (input === null) {\n    return 'null';\n  } else if (typeof input === 'string') {\n    if (input.length > 20) {\n      input = `${input.substring(0, 20)}...`;\n    }\n\n    return JSON.stringify(input);\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return '' + input;\n  } else if (typeof input === 'object') {\n    if (input instanceof Array) {\n      return 'an array';\n    } else {\n      const customObjectName = tryGetCustomObjectType(input);\n\n      if (customObjectName) {\n        return `a custom ${customObjectName} object`;\n      } else {\n        return 'an object';\n      }\n    }\n  } else if (typeof input === 'function') {\n    return 'a function';\n  } else {\n    return fail();\n  }\n}\n/** Hacky method to try to get the constructor name for an object. */\n\n\nfunction tryGetCustomObjectType(input) {\n  if (input.constructor) {\n    const funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n    const results = funcNameRegex.exec(input.constructor.toString());\n\n    if (results && results.length > 1) {\n      return results[1];\n    }\n  }\n\n  return null;\n}\n/**\r\n * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\r\n * underlying instance. Throws if  `obj` is not an instance of `T`.\r\n *\r\n * This cast is used in the Lite and Full SDK to verify instance types for\r\n * arguments passed to the public API.\r\n */\n\n\nfunction cast(obj, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nconstructor) {\n  if ('_delegate' in obj) {\n    // Unwrap Compat types\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj = obj._delegate;\n  }\n\n  if (!(obj instanceof constructor)) {\n    if (constructor.name === obj.constructor.name) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Type does not match the expected instance. Did you pass a ' + `reference from a different Firestore SDK?`);\n    } else {\n      const description = valueDescription(obj);\n      throw new FirestoreError(Code.INVALID_ARGUMENT, `Expected type '${constructor.name}', but it was: ${description}`);\n    }\n  }\n\n  return obj;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** True if and only if the Base64 conversion functions are available. */\n\n\nfunction isBase64Available() {\n  return typeof atob !== 'undefined';\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Helper function to assert Uint8Array is available at runtime. */\n\n\nfunction assertUint8ArrayAvailable() {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError(Code.UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');\n  }\n}\n/** Helper function to assert Base64 functions are available at runtime. */\n\n\nfunction assertBase64Available() {\n  if (!isBase64Available()) {\n    throw new FirestoreError(Code.UNIMPLEMENTED, 'Blobs are unavailable in Firestore in this environment.');\n  }\n}\n/** Immutable class holding a blob (binary data) */\n\n\nclass Blob {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n\n  static fromBase64String(base64) {\n    assertBase64Available();\n    return new Blob(Bytes.fromBase64String(base64));\n  }\n\n  static fromUint8Array(array) {\n    assertUint8ArrayAvailable();\n    return new Blob(Bytes.fromUint8Array(array));\n  }\n\n  toBase64() {\n    assertBase64Available();\n    return this._delegate.toBase64();\n  }\n\n  toUint8Array() {\n    assertUint8ArrayAvailable();\n    return this._delegate.toUint8Array();\n  }\n\n  isEqual(other) {\n    return this._delegate.isEqual(other._delegate);\n  }\n\n  toString() {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isPartialObserver(obj) {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\r\n * Returns true if obj is an object and contains at least one of the specified\r\n * methods.\r\n */\n\n\nfunction implementsAnyMethods(obj, methods) {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const object = obj;\n\n  for (const method of methods) {\n    if (method in object && typeof object[method] === 'function') {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The persistence provider included with the full Firestore SDK.\r\n */\n\n\nclass IndexedDbPersistenceProvider {\n  enableIndexedDbPersistence(firestore, forceOwnership) {\n    return enableIndexedDbPersistence(firestore._delegate, {\n      forceOwnership\n    });\n  }\n\n  enableMultiTabIndexedDbPersistence(firestore) {\n    return enableMultiTabIndexedDbPersistence(firestore._delegate);\n  }\n\n  clearIndexedDbPersistence(firestore) {\n    return clearIndexedDbPersistence(firestore._delegate);\n  }\n\n}\n/**\r\n * Compat class for Firestore. Exposes Firestore Legacy API, but delegates\r\n * to the functional API of firestore-exp.\r\n */\n\n\nclass Firestore {\n  constructor(databaseIdOrApp, _delegate, _persistenceProvider) {\n    this._delegate = _delegate;\n    this._persistenceProvider = _persistenceProvider;\n    this.INTERNAL = {\n      delete: () => this.terminate()\n    };\n\n    if (!(databaseIdOrApp instanceof DatabaseId)) {\n      this._appCompat = databaseIdOrApp;\n    }\n  }\n\n  get _databaseId() {\n    return this._delegate._databaseId;\n  }\n\n  settings(settingsLiteral) {\n    const currentSettings = this._delegate._getSettings();\n\n    if (!settingsLiteral.merge && currentSettings.host !== settingsLiteral.host) {\n      logWarn('You are overriding the original host. If you did not intend ' + 'to override your settings, use {merge: true}.');\n    }\n\n    if (settingsLiteral.merge) {\n      settingsLiteral = Object.assign(Object.assign({}, currentSettings), settingsLiteral); // Remove the property from the settings once the merge is completed\n\n      delete settingsLiteral.merge;\n    }\n\n    this._delegate._setSettings(settingsLiteral);\n  }\n\n  useEmulator(host, port, options = {}) {\n    connectFirestoreEmulator(this._delegate, host, port, options);\n  }\n\n  enableNetwork() {\n    return enableNetwork(this._delegate);\n  }\n\n  disableNetwork() {\n    return disableNetwork(this._delegate);\n  }\n\n  enablePersistence(settings) {\n    let synchronizeTabs = false;\n    let experimentalForceOwningTab = false;\n\n    if (settings) {\n      synchronizeTabs = !!settings.synchronizeTabs;\n      experimentalForceOwningTab = !!settings.experimentalForceOwningTab;\n      validateIsNotUsedTogether('synchronizeTabs', synchronizeTabs, 'experimentalForceOwningTab', experimentalForceOwningTab);\n    }\n\n    return synchronizeTabs ? this._persistenceProvider.enableMultiTabIndexedDbPersistence(this) : this._persistenceProvider.enableIndexedDbPersistence(this, experimentalForceOwningTab);\n  }\n\n  clearPersistence() {\n    return this._persistenceProvider.clearIndexedDbPersistence(this);\n  }\n\n  terminate() {\n    if (this._appCompat) {\n      this._appCompat._removeServiceInstance('firestore');\n\n      this._appCompat._removeServiceInstance('firestore-exp');\n    }\n\n    return this._delegate._delete();\n  }\n\n  waitForPendingWrites() {\n    return waitForPendingWrites(this._delegate);\n  }\n\n  onSnapshotsInSync(arg) {\n    return onSnapshotsInSync(this._delegate, arg);\n  }\n\n  get app() {\n    if (!this._appCompat) {\n      throw new FirestoreError(Code.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" + 'not available');\n    }\n\n    return this._appCompat;\n  }\n\n  collection(pathString) {\n    try {\n      return new CollectionReference(this, collection(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e, 'collection()', 'Firestore.collection()');\n    }\n  }\n\n  doc(pathString) {\n    try {\n      return new DocumentReference(this, doc(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e, 'doc()', 'Firestore.doc()');\n    }\n  }\n\n  collectionGroup(collectionId) {\n    try {\n      return new Query(this, collectionGroup(this._delegate, collectionId));\n    } catch (e) {\n      throw replaceFunctionName(e, 'collectionGroup()', 'Firestore.collectionGroup()');\n    }\n  }\n\n  runTransaction(updateFunction) {\n    return runTransaction(this._delegate, transaction => updateFunction(new Transaction(this, transaction)));\n  }\n\n  batch() {\n    ensureFirestoreConfigured(this._delegate);\n    return new WriteBatch(new WriteBatch$1(this._delegate, mutations => executeWrite(this._delegate, mutations)));\n  }\n\n  loadBundle(bundleData) {\n    throw new FirestoreError(Code.FAILED_PRECONDITION, '\"loadBundle()\" does not exist, have you imported \"firebase/firestore/bundle\"?');\n  }\n\n  namedQuery(name) {\n    throw new FirestoreError(Code.FAILED_PRECONDITION, '\"namedQuery()\" does not exist, have you imported \"firebase/firestore/bundle\"?');\n  }\n\n}\n\nclass UserDataWriter extends AbstractUserDataWriter {\n  constructor(firestore) {\n    super();\n    this.firestore = firestore;\n  }\n\n  convertBytes(bytes) {\n    return new Blob(new Bytes(bytes));\n  }\n\n  convertReference(name) {\n    const key = this.convertDocumentKey(name, this.firestore._databaseId);\n    return DocumentReference.forKey(key, this.firestore,\n    /* converter= */\n    null);\n  }\n\n}\n\nfunction setLogLevel(level) {\n  setLogLevel$1(level);\n}\n/**\r\n * A reference to a transaction.\r\n */\n\n\nclass Transaction {\n  constructor(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(_firestore);\n  }\n\n  get(documentRef) {\n    const ref = castReference(documentRef);\n    return this._delegate.get(ref).then(result => new DocumentSnapshot(this._firestore, new DocumentSnapshot$1(this._firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, ref.converter)));\n  }\n\n  set(documentRef, data, options) {\n    const ref = castReference(documentRef);\n\n    if (options) {\n      validateSetOptions('Transaction.set', options);\n\n      this._delegate.set(ref, data, options);\n    } else {\n      this._delegate.set(ref, data);\n    }\n\n    return this;\n  }\n\n  update(documentRef, dataOrField, value, ...moreFieldsAndValues) {\n    const ref = castReference(documentRef);\n\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField);\n    } else {\n      this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);\n    }\n\n    return this;\n  }\n\n  delete(documentRef) {\n    const ref = castReference(documentRef);\n\n    this._delegate.delete(ref);\n\n    return this;\n  }\n\n}\n\nclass WriteBatch {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n\n  set(documentRef, data, options) {\n    const ref = castReference(documentRef);\n\n    if (options) {\n      validateSetOptions('WriteBatch.set', options);\n\n      this._delegate.set(ref, data, options);\n    } else {\n      this._delegate.set(ref, data);\n    }\n\n    return this;\n  }\n\n  update(documentRef, dataOrField, value, ...moreFieldsAndValues) {\n    const ref = castReference(documentRef);\n\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField);\n    } else {\n      this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);\n    }\n\n    return this;\n  }\n\n  delete(documentRef) {\n    const ref = castReference(documentRef);\n\n    this._delegate.delete(ref);\n\n    return this;\n  }\n\n  commit() {\n    return this._delegate.commit();\n  }\n\n}\n/**\r\n * Wraps a `PublicFirestoreDataConverter` translating the types from the\r\n * experimental SDK into corresponding types from the Classic SDK before passing\r\n * them to the wrapped converter.\r\n */\n\n\nclass FirestoreDataConverter {\n  constructor(_firestore, _userDataWriter, _delegate) {\n    this._firestore = _firestore;\n    this._userDataWriter = _userDataWriter;\n    this._delegate = _delegate;\n  }\n\n  fromFirestore(snapshot, options) {\n    const expSnapshot = new QueryDocumentSnapshot$1(this._firestore._delegate, this._userDataWriter, snapshot._key, snapshot._document, snapshot.metadata,\n    /* converter= */\n    null);\n    return this._delegate.fromFirestore(new QueryDocumentSnapshot(this._firestore, expSnapshot), options !== null && options !== void 0 ? options : {});\n  }\n\n  toFirestore(modelObject, options) {\n    if (!options) {\n      return this._delegate.toFirestore(modelObject);\n    } else {\n      return this._delegate.toFirestore(modelObject, options);\n    }\n  } // Use the same instance of `FirestoreDataConverter` for the given instances\n  // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will\n  // compare equal for two objects created with the same converter instance.\n\n\n  static getInstance(firestore, converter) {\n    const converterMapByFirestore = FirestoreDataConverter.INSTANCES;\n    let untypedConverterByConverter = converterMapByFirestore.get(firestore);\n\n    if (!untypedConverterByConverter) {\n      untypedConverterByConverter = new WeakMap();\n      converterMapByFirestore.set(firestore, untypedConverterByConverter);\n    }\n\n    let instance = untypedConverterByConverter.get(converter);\n\n    if (!instance) {\n      instance = new FirestoreDataConverter(firestore, new UserDataWriter(firestore), converter);\n      untypedConverterByConverter.set(converter, instance);\n    }\n\n    return instance;\n  }\n\n}\n\nFirestoreDataConverter.INSTANCES = new WeakMap();\n/**\r\n * A reference to a particular document in a collection in the database.\r\n */\n\nclass DocumentReference {\n  constructor(firestore, _delegate) {\n    this.firestore = firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  static forPath(path, firestore, converter) {\n    if (path.length % 2 !== 0) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid document reference. Document ' + 'references must have an even number of segments, but ' + `${path.canonicalString()} has ${path.length}`);\n    }\n\n    return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, new DocumentKey(path)));\n  }\n\n  static forKey(key, firestore, converter) {\n    return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, key));\n  }\n\n  get id() {\n    return this._delegate.id;\n  }\n\n  get parent() {\n    return new CollectionReference(this.firestore, this._delegate.parent);\n  }\n\n  get path() {\n    return this._delegate.path;\n  }\n\n  collection(pathString) {\n    try {\n      return new CollectionReference(this.firestore, collection(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e, 'collection()', 'DocumentReference.collection()');\n    }\n  }\n\n  isEqual(other) {\n    other = getModularInstance(other);\n\n    if (!(other instanceof DocumentReference$1)) {\n      return false;\n    }\n\n    return refEqual(this._delegate, other);\n  }\n\n  set(value, options) {\n    options = validateSetOptions('DocumentReference.set', options);\n\n    try {\n      return setDoc(this._delegate, value, options);\n    } catch (e) {\n      throw replaceFunctionName(e, 'setDoc()', 'DocumentReference.set()');\n    }\n  }\n\n  update(fieldOrUpdateData, value, ...moreFieldsAndValues) {\n    try {\n      if (arguments.length === 1) {\n        return updateDoc(this._delegate, fieldOrUpdateData);\n      } else {\n        return updateDoc(this._delegate, fieldOrUpdateData, value, ...moreFieldsAndValues);\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'updateDoc()', 'DocumentReference.update()');\n    }\n  }\n\n  delete() {\n    return deleteDoc(this._delegate);\n  }\n\n  onSnapshot(...args) {\n    const options = extractSnapshotOptions(args);\n    const observer = wrapObserver(args, result => new DocumentSnapshot(this.firestore, new DocumentSnapshot$1(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));\n    return onSnapshot(this._delegate, options, observer);\n  }\n\n  get(options) {\n    let snap;\n\n    if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\n      snap = getDocFromCache(this._delegate);\n    } else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\n      snap = getDocFromServer(this._delegate);\n    } else {\n      snap = getDoc(this._delegate);\n    }\n\n    return snap.then(result => new DocumentSnapshot(this.firestore, new DocumentSnapshot$1(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));\n  }\n\n  withConverter(converter) {\n    return new DocumentReference(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n  }\n\n}\n/**\r\n * Replaces the function name in an error thrown by the firestore-exp API\r\n * with the function names used in the classic API.\r\n */\n\n\nfunction replaceFunctionName(e, original, updated) {\n  e.message = e.message.replace(original, updated);\n  return e;\n}\n/**\r\n * Iterates the list of arguments from an `onSnapshot` call and returns the\r\n * first argument that may be an `SnapshotListenOptions` object. Returns an\r\n * empty object if none is found.\r\n */\n\n\nfunction extractSnapshotOptions(args) {\n  for (const arg of args) {\n    if (typeof arg === 'object' && !isPartialObserver(arg)) {\n      return arg;\n    }\n  }\n\n  return {};\n}\n/**\r\n * Creates an observer that can be passed to the firestore-exp SDK. The\r\n * observer converts all observed values into the format expected by the classic\r\n * SDK.\r\n *\r\n * @param args - The list of arguments from an `onSnapshot` call.\r\n * @param wrapper - The function that converts the firestore-exp type into the\r\n * type used by this shim.\r\n */\n\n\nfunction wrapObserver(args, wrapper) {\n  var _a, _b;\n\n  let userObserver;\n\n  if (isPartialObserver(args[0])) {\n    userObserver = args[0];\n  } else if (isPartialObserver(args[1])) {\n    userObserver = args[1];\n  } else if (typeof args[0] === 'function') {\n    userObserver = {\n      next: args[0],\n      error: args[1],\n      complete: args[2]\n    };\n  } else {\n    userObserver = {\n      next: args[1],\n      error: args[2],\n      complete: args[3]\n    };\n  }\n\n  return {\n    next: val => {\n      if (userObserver.next) {\n        userObserver.next(wrapper(val));\n      }\n    },\n    error: (_a = userObserver.error) === null || _a === void 0 ? void 0 : _a.bind(userObserver),\n    complete: (_b = userObserver.complete) === null || _b === void 0 ? void 0 : _b.bind(userObserver)\n  };\n}\n\nclass DocumentSnapshot {\n  constructor(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n\n  get ref() {\n    return new DocumentReference(this._firestore, this._delegate.ref);\n  }\n\n  get id() {\n    return this._delegate.id;\n  }\n\n  get metadata() {\n    return this._delegate.metadata;\n  }\n\n  get exists() {\n    return this._delegate.exists();\n  }\n\n  data(options) {\n    return this._delegate.data(options);\n  }\n\n  get(fieldPath, options // We are using `any` here to avoid an explicit cast by our users.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) {\n    return this._delegate.get(fieldPath, options);\n  }\n\n  isEqual(other) {\n    return snapshotEqual(this._delegate, other._delegate);\n  }\n\n}\n\nclass QueryDocumentSnapshot extends DocumentSnapshot {\n  data(options) {\n    const data = this._delegate.data(options);\n\n    return data;\n  }\n\n}\n\nclass Query {\n  constructor(firestore, _delegate) {\n    this.firestore = firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  where(fieldPath, opStr, value) {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `where` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query(this.firestore, query(this._delegate, where(fieldPath, opStr, value)));\n    } catch (e) {\n      throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\n    }\n  }\n\n  orderBy(fieldPath, directionStr) {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `orderBy` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query(this.firestore, query(this._delegate, orderBy(fieldPath, directionStr)));\n    } catch (e) {\n      throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\n    }\n  }\n\n  limit(n) {\n    try {\n      return new Query(this.firestore, query(this._delegate, limit(n)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'limit()', 'Query.limit()');\n    }\n  }\n\n  limitToLast(n) {\n    try {\n      return new Query(this.firestore, query(this._delegate, limitToLast(n)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'limitToLast()', 'Query.limitToLast()');\n    }\n  }\n\n  startAt(...args) {\n    try {\n      return new Query(this.firestore, query(this._delegate, startAt(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'startAt()', 'Query.startAt()');\n    }\n  }\n\n  startAfter(...args) {\n    try {\n      return new Query(this.firestore, query(this._delegate, startAfter(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'startAfter()', 'Query.startAfter()');\n    }\n  }\n\n  endBefore(...args) {\n    try {\n      return new Query(this.firestore, query(this._delegate, endBefore(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'endBefore()', 'Query.endBefore()');\n    }\n  }\n\n  endAt(...args) {\n    try {\n      return new Query(this.firestore, query(this._delegate, endAt(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'endAt()', 'Query.endAt()');\n    }\n  }\n\n  isEqual(other) {\n    return queryEqual(this._delegate, other._delegate);\n  }\n\n  get(options) {\n    let query;\n\n    if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\n      query = getDocsFromCache(this._delegate);\n    } else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\n      query = getDocsFromServer(this._delegate);\n    } else {\n      query = getDocs(this._delegate);\n    }\n\n    return query.then(result => new QuerySnapshot(this.firestore, new QuerySnapshot$1(this.firestore._delegate, this._userDataWriter, this._delegate, result._snapshot)));\n  }\n\n  onSnapshot(...args) {\n    const options = extractSnapshotOptions(args);\n    const observer = wrapObserver(args, snap => new QuerySnapshot(this.firestore, new QuerySnapshot$1(this.firestore._delegate, this._userDataWriter, this._delegate, snap._snapshot)));\n    return onSnapshot(this._delegate, options, observer);\n  }\n\n  withConverter(converter) {\n    return new Query(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n  }\n\n}\n\nclass DocumentChange {\n  constructor(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n\n  get type() {\n    return this._delegate.type;\n  }\n\n  get doc() {\n    return new QueryDocumentSnapshot(this._firestore, this._delegate.doc);\n  }\n\n  get oldIndex() {\n    return this._delegate.oldIndex;\n  }\n\n  get newIndex() {\n    return this._delegate.newIndex;\n  }\n\n}\n\nclass QuerySnapshot {\n  constructor(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n\n  get query() {\n    return new Query(this._firestore, this._delegate.query);\n  }\n\n  get metadata() {\n    return this._delegate.metadata;\n  }\n\n  get size() {\n    return this._delegate.size;\n  }\n\n  get empty() {\n    return this._delegate.empty;\n  }\n\n  get docs() {\n    return this._delegate.docs.map(doc => new QueryDocumentSnapshot(this._firestore, doc));\n  }\n\n  docChanges(options) {\n    return this._delegate.docChanges(options).map(docChange => new DocumentChange(this._firestore, docChange));\n  }\n\n  forEach(callback, thisArg) {\n    this._delegate.forEach(snapshot => {\n      callback.call(thisArg, new QueryDocumentSnapshot(this._firestore, snapshot));\n    });\n  }\n\n  isEqual(other) {\n    return snapshotEqual(this._delegate, other._delegate);\n  }\n\n}\n\nclass CollectionReference extends Query {\n  constructor(firestore, _delegate) {\n    super(firestore, _delegate);\n    this.firestore = firestore;\n    this._delegate = _delegate;\n  }\n\n  get id() {\n    return this._delegate.id;\n  }\n\n  get path() {\n    return this._delegate.path;\n  }\n\n  get parent() {\n    const docRef = this._delegate.parent;\n    return docRef ? new DocumentReference(this.firestore, docRef) : null;\n  }\n\n  doc(documentPath) {\n    try {\n      if (documentPath === undefined) {\n        // Call `doc` without `documentPath` if `documentPath` is `undefined`\n        // as `doc` validates the number of arguments to prevent users from\n        // accidentally passing `undefined`.\n        return new DocumentReference(this.firestore, doc(this._delegate));\n      } else {\n        return new DocumentReference(this.firestore, doc(this._delegate, documentPath));\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'doc()', 'CollectionReference.doc()');\n    }\n  }\n\n  add(data) {\n    return addDoc(this._delegate, data).then(docRef => new DocumentReference(this.firestore, docRef));\n  }\n\n  isEqual(other) {\n    return refEqual(this._delegate, other._delegate);\n  }\n\n  withConverter(converter) {\n    return new CollectionReference(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n  }\n\n}\n\nfunction castReference(documentRef) {\n  return cast(documentRef, DocumentReference$1);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction loadBundle(data) {\n  return loadBundle$1(this._delegate, data);\n}\n\nfunction namedQuery(queryName) {\n  return namedQuery$1(this._delegate, queryName).then(expQuery => {\n    if (!expQuery) {\n      return null;\n    }\n\n    return new Query(this, // We can pass `expQuery` here directly since named queries don't have a UserDataConverter.\n    // Otherwise, we would have to create a new ExpQuery and pass the old UserDataConverter.\n    expQuery);\n  });\n}\n/**\r\n * Prototype patches bundle loading to Firestore.\r\n */\n\n\nfunction registerBundle(instance) {\n  instance.prototype.loadBundle = loadBundle;\n  instance.prototype.namedQuery = namedQuery;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n\n/**\r\n * A `FieldPath` refers to a field in a document. The path may consist of a\r\n * single field name (referring to a top-level field in the document), or a list\r\n * of field names (referring to a nested field in the document).\r\n */\n\n\nclass FieldPath {\n  /**\r\n   * Creates a FieldPath from the provided field names. If more than one field\r\n   * name is provided, the path will point to a nested field in a document.\r\n   *\r\n   * @param fieldNames - A list of field names.\r\n   */\n  constructor(...fieldNames) {\n    this._delegate = new FieldPath$2(...fieldNames);\n  }\n\n  static documentId() {\n    /**\r\n     * Internal Note: The backend doesn't technically support querying by\r\n     * document ID. Instead it queries by the entire document name (full path\r\n     * included), but in the cases we currently support documentId(), the net\r\n     * effect is the same.\r\n     */\n    return new FieldPath(FieldPath$1.keyField().canonicalString());\n  }\n\n  isEqual(other) {\n    other = getModularInstance(other);\n\n    if (!(other instanceof FieldPath$2)) {\n      return false;\n    }\n\n    return this._delegate._internalPath.isEqual(other._internalPath);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass FieldValue {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n\n  static serverTimestamp() {\n    const delegate = serverTimestamp();\n    delegate._methodName = 'FieldValue.serverTimestamp';\n    return new FieldValue(delegate);\n  }\n\n  static delete() {\n    const delegate = deleteField();\n    delegate._methodName = 'FieldValue.delete';\n    return new FieldValue(delegate);\n  }\n\n  static arrayUnion(...elements) {\n    const delegate = arrayUnion(...elements);\n    delegate._methodName = 'FieldValue.arrayUnion';\n    return new FieldValue(delegate);\n  }\n\n  static arrayRemove(...elements) {\n    const delegate = arrayRemove(...elements);\n    delegate._methodName = 'FieldValue.arrayRemove';\n    return new FieldValue(delegate);\n  }\n\n  static increment(n) {\n    const delegate = increment(n);\n    delegate._methodName = 'FieldValue.increment';\n    return new FieldValue(delegate);\n  }\n\n  isEqual(other) {\n    return this._delegate.isEqual(other._delegate);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst firestoreNamespace = {\n  Firestore,\n  GeoPoint,\n  Timestamp,\n  Blob,\n  Transaction,\n  WriteBatch,\n  DocumentReference,\n  DocumentSnapshot,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  CollectionReference,\n  FieldPath,\n  FieldValue,\n  setLogLevel,\n  CACHE_SIZE_UNLIMITED\n};\n/**\r\n * Configures Firestore as part of the Firebase SDK by calling registerComponent.\r\n *\r\n * @param firebase - The FirebaseNamespace to register Firestore with\r\n * @param firestoreFactory - A factory function that returns a new Firestore\r\n *    instance.\r\n */\n\nfunction configureForFirebase(firebase, firestoreFactory) {\n  firebase.INTERNAL.registerComponent(new Component('firestore-compat', container => {\n    const app = container.getProvider('app-compat').getImmediate();\n    const firestoreExp = container.getProvider('firestore-exp').getImmediate();\n    return firestoreFactory(app, firestoreExp);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(Object.assign({}, firestoreNamespace)));\n}\n\nconst name = \"@firebase/firestore-compat\";\nconst version = \"0.0.900-exp.6ef484a04\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Registers the main Firestore build with the components framework.\r\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\r\n */\n\nfunction registerFirestore(instance) {\n  setSDKVersion(instance.SDK_VERSION);\n  configureForFirebase(instance, (app, firestoreExp) => new Firestore(app, firestoreExp, new IndexedDbPersistenceProvider()));\n  instance.registerVersion(name, version);\n}\n\nregisterFirestore(firebase);\nregisterBundle(Firestore);\nexport { registerFirestore };","map":{"version":3,"sources":["../../../src/core/database_info.ts","../../../src/core/version.ts","../../../src/platform/browser/format_json.ts","../../../src/util/log.ts","../../../src/util/assert.ts","../../../src/util/error.ts","../../../src/model/path.ts","../../../src/model/document_key.ts","../../../src/util/input_validation.ts","../../../src/platform/browser/base64.ts","../../../src/api/blob.ts","../../../src/api/observer.ts","../../../src/api/database.ts","../../../compat/bundle.ts","../../../src/api/field_path.ts","../../../src/api/field_value.ts","../../../compat/config.ts","../../../compat/index.ts"],"names":["version","setLogLevel","FieldPath","ExpWriteBatch","setClientLogLevel","ExpDocumentSnapshot","ExpQueryDocumentSnapshot","ExpDocumentReference","ExpQuerySnapshot","expLoadBundle","expNamedQuery","ExpFieldPath","InternalFieldPath"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class DatabaseInfo {\n  /**\n   * Constructs a DatabaseInfo using the provided host, databaseId and\n   * persistenceKey.\n   *\n   * @param databaseId - The database to use.\n   * @param appId - The Firebase App Id.\n   * @param persistenceKey - A unique identifier for this Firestore's local\n   * storage (used in conjunction with the databaseId).\n   * @param host - The Firestore backend host to connect to.\n   * @param ssl - Whether to use SSL when connecting.\n   * @param forceLongPolling - Whether to use the forceLongPolling option\n   * when using WebChannel as the network transport.\n   * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\n   * option when using WebChannel as the network transport.\n   * @param useFetchStreams Whether to use the Fetch API instead of\n   * XMLHTTPRequest\n   */\n  constructor(\n    readonly databaseId: DatabaseId,\n    readonly appId: string,\n    readonly persistenceKey: string,\n    readonly host: string,\n    readonly ssl: boolean,\n    readonly forceLongPolling: boolean,\n    readonly autoDetectLongPolling: boolean,\n    readonly useFetchStreams: boolean\n  ) {}\n}\n\n/** The default database name for a project. */\nconst DEFAULT_DATABASE_NAME = '(default)';\n\n/** Represents the database ID a Firestore client is associated with. */\nexport class DatabaseId {\n  readonly database: string;\n  constructor(readonly projectId: string, database?: string) {\n    this.database = database ? database : DEFAULT_DATABASE_NAME;\n  }\n\n  get isDefaultDatabase(): boolean {\n    return this.database === DEFAULT_DATABASE_NAME;\n  }\n\n  isEqual(other: {}): boolean {\n    return (\n      other instanceof DatabaseId &&\n      other.projectId === this.projectId &&\n      other.database === this.database\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nimport { version } from '../../../firebase/package.json';\nexport let SDK_VERSION = version;\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Formats an object as a JSON string, suitable for logging. */\nexport function formatJSON(value: unknown): string {\n  return JSON.stringify(value);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel, LogLevelString } from '@firebase/logger';\n\nimport { SDK_VERSION } from '../core/version';\nimport { formatJSON } from '../platform/format_json';\n\nexport { LogLevel, LogLevelString };\n\nconst logClient = new Logger('@firebase/firestore');\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function getLogLevel(): LogLevel {\n  return logClient.logLevel;\n}\n\n/**\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n *\n * @param logLevel - The verbosity you set for activity and error logging. Can\n *   be any of the following values:\n *\n *   <ul>\n *     <li>`debug` for the most verbose logging level, primarily for\n *     debugging.</li>\n *     <li>`error` to log errors only.</li>\n *     <li><code>`silent` to turn off logging.</li>\n *   </ul>\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  logClient.setLogLevel(logLevel);\n}\n\nexport function logDebug(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.DEBUG) {\n    const args = obj.map(argToString);\n    logClient.debug(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function logError(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    const args = obj.map(argToString);\n    logClient.error(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function logWarn(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    const args = obj.map(argToString);\n    logClient.warn(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj: unknown): string | unknown {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    try {\n      return formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '../core/version';\n\nimport { logError } from './log';\n\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nexport function fail(failure: string = 'Unexpected state'): never {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message =\n    `FIRESTORE (${SDK_VERSION}) INTERNAL ASSERTION FAILED: ` + failure;\n  logError(message);\n\n  // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */\nexport function hardAssert(\n  assertion: boolean,\n  message?: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * The code of callsites invoking this function are stripped out in production\n * builds. Any side-effects of code within the debugAssert() invocation will not\n * happen in this case.\n */\nexport function debugAssert(\n  assertion: boolean,\n  message: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */\nexport function debugCast<T>(\n  obj: object,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor: { new (...args: any[]): T }\n): T | never {\n  debugAssert(\n    obj instanceof constructor,\n    `Expected type '${constructor.name}', but was '${obj.constructor.name}'`\n  );\n  return obj as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The set of Firestore status codes. The codes are the same at the ones\n * exposed by gRPC here:\n * https://github.com/grpc/grpc/blob/master/doc/statuscodes.md\n *\n * Possible values:\n * - 'cancelled': The operation was cancelled (typically by the caller).\n * - 'unknown': Unknown error or an error from a different error domain.\n * - 'invalid-argument': Client specified an invalid argument. Note that this\n *   differs from 'failed-precondition'. 'invalid-argument' indicates\n *   arguments that are problematic regardless of the state of the system\n *   (e.g. an invalid field name).\n * - 'deadline-exceeded': Deadline expired before operation could complete.\n *   For operations that change the state of the system, this error may be\n *   returned even if the operation has completed successfully. For example,\n *   a successful response from a server could have been delayed long enough\n *   for the deadline to expire.\n * - 'not-found': Some requested document was not found.\n * - 'already-exists': Some document that we attempted to create already\n *   exists.\n * - 'permission-denied': The caller does not have permission to execute the\n *   specified operation.\n * - 'resource-exhausted': Some resource has been exhausted, perhaps a\n *   per-user quota, or perhaps the entire file system is out of space.\n * - 'failed-precondition': Operation was rejected because the system is not\n *   in a state required for the operation's execution.\n * - 'aborted': The operation was aborted, typically due to a concurrency\n *   issue like transaction aborts, etc.\n * - 'out-of-range': Operation was attempted past the valid range.\n * - 'unimplemented': Operation is not implemented or not supported/enabled.\n * - 'internal': Internal errors. Means some invariants expected by\n *   underlying system has been broken. If you see one of these errors,\n *   something is very broken.\n * - 'unavailable': The service is currently unavailable. This is most likely\n *   a transient condition and may be corrected by retrying with a backoff.\n * - 'data-loss': Unrecoverable data loss or corruption.\n * - 'unauthenticated': The request does not have valid authentication\n *   credentials for the operation.\n */\nexport type FirestoreErrorCode =\n  | 'cancelled'\n  | 'unknown'\n  | 'invalid-argument'\n  | 'deadline-exceeded'\n  | 'not-found'\n  | 'already-exists'\n  | 'permission-denied'\n  | 'resource-exhausted'\n  | 'failed-precondition'\n  | 'aborted'\n  | 'out-of-range'\n  | 'unimplemented'\n  | 'internal'\n  | 'unavailable'\n  | 'data-loss'\n  | 'unauthenticated';\n\n/**\n * Error Codes describing the different ways Firestore can fail. These come\n * directly from GRPC.\n */\nexport type Code = FirestoreErrorCode;\n\nexport const Code = {\n  // Causes are copied from:\n  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n  /** Not an error; returned on success. */\n  OK: 'ok' as FirestoreErrorCode,\n\n  /** The operation was cancelled (typically by the caller). */\n  CANCELLED: 'cancelled' as FirestoreErrorCode,\n\n  /** Unknown error or an error from a different error domain. */\n  UNKNOWN: 'unknown' as FirestoreErrorCode,\n\n  /**\n   * Client specified an invalid argument. Note that this differs from\n   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n   * problematic regardless of the state of the system (e.g., a malformed file\n   * name).\n   */\n  INVALID_ARGUMENT: 'invalid-argument' as FirestoreErrorCode,\n\n  /**\n   * Deadline expired before operation could complete. For operations that\n   * change the state of the system, this error may be returned even if the\n   * operation has completed successfully. For example, a successful response\n   * from a server could have been delayed long enough for the deadline to\n   * expire.\n   */\n  DEADLINE_EXCEEDED: 'deadline-exceeded' as FirestoreErrorCode,\n\n  /** Some requested entity (e.g., file or directory) was not found. */\n  NOT_FOUND: 'not-found' as FirestoreErrorCode,\n\n  /**\n   * Some entity that we attempted to create (e.g., file or directory) already\n   * exists.\n   */\n  ALREADY_EXISTS: 'already-exists' as FirestoreErrorCode,\n\n  /**\n   * The caller does not have permission to execute the specified operation.\n   * PERMISSION_DENIED must not be used for rejections caused by exhausting\n   * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n   * PERMISSION_DENIED must not be used if the caller can not be identified\n   * (use UNAUTHENTICATED instead for those errors).\n   */\n  PERMISSION_DENIED: 'permission-denied' as FirestoreErrorCode,\n\n  /**\n   * The request does not have valid authentication credentials for the\n   * operation.\n   */\n  UNAUTHENTICATED: 'unauthenticated' as FirestoreErrorCode,\n\n  /**\n   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n   * entire file system is out of space.\n   */\n  RESOURCE_EXHAUSTED: 'resource-exhausted' as FirestoreErrorCode,\n\n  /**\n   * Operation was rejected because the system is not in a state required for\n   * the operation's execution. For example, directory to be deleted may be\n   * non-empty, an rmdir operation is applied to a non-directory, etc.\n   *\n   * A litmus test that may help a service implementor in deciding\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n   *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n   *  (b) Use ABORTED if the client should retry at a higher-level\n   *      (e.g., restarting a read-modify-write sequence).\n   *  (c) Use FAILED_PRECONDITION if the client should not retry until\n   *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n   *      fails because the directory is non-empty, FAILED_PRECONDITION\n   *      should be returned since the client should not retry unless\n   *      they have first fixed up the directory by deleting files from it.\n   *  (d) Use FAILED_PRECONDITION if the client performs conditional\n   *      REST Get/Update/Delete on a resource and the resource on the\n   *      server does not match the condition. E.g., conflicting\n   *      read-modify-write on the same resource.\n   */\n  FAILED_PRECONDITION: 'failed-precondition' as FirestoreErrorCode,\n\n  /**\n   * The operation was aborted, typically due to a concurrency issue like\n   * sequencer check failures, transaction aborts, etc.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  ABORTED: 'aborted' as FirestoreErrorCode,\n\n  /**\n   * Operation was attempted past the valid range. E.g., seeking or reading\n   * past end of file.\n   *\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n   * if the system state changes. For example, a 32-bit file system will\n   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n   * an offset past the current file size.\n   *\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\n   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n   * when it applies so that callers who are iterating through a space can\n   * easily look for an OUT_OF_RANGE error to detect when they are done.\n   */\n  OUT_OF_RANGE: 'out-of-range' as FirestoreErrorCode,\n\n  /** Operation is not implemented or not supported/enabled in this service. */\n  UNIMPLEMENTED: 'unimplemented' as FirestoreErrorCode,\n\n  /**\n   * Internal errors. Means some invariants expected by underlying System has\n   * been broken. If you see one of these errors, Something is very broken.\n   */\n  INTERNAL: 'internal' as FirestoreErrorCode,\n\n  /**\n   * The service is currently unavailable. This is a most likely a transient\n   * condition and may be corrected by retrying with a backoff.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  UNAVAILABLE: 'unavailable' as FirestoreErrorCode,\n\n  /** Unrecoverable data loss or corruption. */\n  DATA_LOSS: 'data-loss' as FirestoreErrorCode\n};\n\n/** An error returned by a Firestore operation. */\nexport class FirestoreError extends Error {\n  /** The custom name for all FirestoreErrors. */\n  readonly name: string = 'FirebaseError';\n\n  /** The stack of the error. */\n  readonly stack?: string;\n\n  /** @hideconstructor */\n  constructor(\n    /**\n     * The backend error code associated with this error.\n     */\n    readonly code: FirestoreErrorCode,\n    /**\n     * A custom error description.\n     */\n    readonly message: string\n  ) {\n    super(message);\n\n    // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\n\nexport const DOCUMENT_KEY_NAME = '__name__';\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nabstract class BasePath<B extends BasePath<B>> {\n  private segments: string[];\n  private offset: number;\n  private len: number;\n\n  constructor(segments: string[], offset?: number, length?: number) {\n    if (offset === undefined) {\n      offset = 0;\n    } else if (offset > segments.length) {\n      fail('offset ' + offset + ' out of range ' + segments.length);\n    }\n\n    if (length === undefined) {\n      length = segments.length - offset;\n    } else if (length > segments.length - offset) {\n      fail('length ' + length + ' out of range ' + (segments.length - offset));\n    }\n    this.segments = segments;\n    this.offset = offset;\n    this.len = length;\n  }\n\n  /**\n   * Abstract constructor method to construct an instance of B with the given\n   * parameters.\n   */\n  protected abstract construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): B;\n\n  /**\n   * Returns a String representation.\n   *\n   * Implementing classes are required to provide deterministic implementations as\n   * the String representation is used to obtain canonical Query IDs.\n   */\n  abstract toString(): string;\n\n  get length(): number {\n    return this.len;\n  }\n\n  isEqual(other: B): boolean {\n    return BasePath.comparator(this, other) === 0;\n  }\n\n  child(nameOrPath: string | B): B {\n    const segments = this.segments.slice(this.offset, this.limit());\n    if (nameOrPath instanceof BasePath) {\n      nameOrPath.forEach(segment => {\n        segments.push(segment);\n      });\n    } else {\n      segments.push(nameOrPath);\n    }\n    return this.construct(segments);\n  }\n\n  /** The index of one past the last segment of the path. */\n  private limit(): number {\n    return this.offset + this.length;\n  }\n\n  popFirst(size?: number): B {\n    size = size === undefined ? 1 : size;\n    debugAssert(\n      this.length >= size,\n      \"Can't call popFirst() with less segments\"\n    );\n    return this.construct(\n      this.segments,\n      this.offset + size,\n      this.length - size\n    );\n  }\n\n  popLast(): B {\n    debugAssert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n    return this.construct(this.segments, this.offset, this.length - 1);\n  }\n\n  firstSegment(): string {\n    debugAssert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n    return this.segments[this.offset];\n  }\n\n  lastSegment(): string {\n    return this.get(this.length - 1);\n  }\n\n  get(index: number): string {\n    debugAssert(index < this.length, 'Index out of range');\n    return this.segments[this.offset + index];\n  }\n\n  isEmpty(): boolean {\n    return this.length === 0;\n  }\n\n  isPrefixOf(other: this): boolean {\n    if (other.length < this.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== other.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isImmediateParentOf(potentialChild: this): boolean {\n    if (this.length + 1 !== potentialChild.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== potentialChild.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  forEach(fn: (segment: string) => void): void {\n    for (let i = this.offset, end = this.limit(); i < end; i++) {\n      fn(this.segments[i]);\n    }\n  }\n\n  toArray(): string[] {\n    return this.segments.slice(this.offset, this.limit());\n  }\n\n  static comparator<T extends BasePath<T>>(\n    p1: BasePath<T>,\n    p2: BasePath<T>\n  ): number {\n    const len = Math.min(p1.length, p2.length);\n    for (let i = 0; i < len; i++) {\n      const left = p1.get(i);\n      const right = p2.get(i);\n      if (left < right) {\n        return -1;\n      }\n      if (left > right) {\n        return 1;\n      }\n    }\n    if (p1.length < p2.length) {\n      return -1;\n    }\n    if (p1.length > p2.length) {\n      return 1;\n    }\n    return 0;\n  }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nexport class ResourcePath extends BasePath<ResourcePath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): ResourcePath {\n    return new ResourcePath(segments, offset, length);\n  }\n\n  canonicalString(): string {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    return this.toArray().join('/');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Creates a resource path from the given slash-delimited string. If multiple\n   * arguments are provided, all components are combined. Leading and trailing\n   * slashes from all components are ignored.\n   */\n  static fromString(...pathComponents: string[]): ResourcePath {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    const segments: string[] = [];\n    for (const path of pathComponents) {\n      if (path.indexOf('//') >= 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid segment (${path}). Paths must not contain // in them.`\n        );\n      }\n      // Strip leading and traling slashed.\n      segments.push(...path.split('/').filter(segment => segment.length > 0));\n    }\n\n    return new ResourcePath(segments);\n  }\n\n  static emptyPath(): ResourcePath {\n    return new ResourcePath([]);\n  }\n}\n\nconst identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/** A dot-separated path for navigating sub-objects within a document. */\nexport class FieldPath extends BasePath<FieldPath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): FieldPath {\n    return new FieldPath(segments, offset, length);\n  }\n\n  /**\n   * Returns true if the string could be used as a segment in a field path\n   * without escaping.\n   */\n  private static isValidIdentifier(segment: string): boolean {\n    return identifierRegExp.test(segment);\n  }\n\n  canonicalString(): string {\n    return this.toArray()\n      .map(str => {\n        str = str.replace(/\\\\/g, '\\\\\\\\').replace(/`/g, '\\\\`');\n        if (!FieldPath.isValidIdentifier(str)) {\n          str = '`' + str + '`';\n        }\n        return str;\n      })\n      .join('.');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Returns true if this field references the key of a document.\n   */\n  isKeyField(): boolean {\n    return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n  }\n\n  /**\n   * The field designating the key of a document.\n   */\n  static keyField(): FieldPath {\n    return new FieldPath([DOCUMENT_KEY_NAME]);\n  }\n\n  /**\n   * Parses a field string from the given server-formatted string.\n   *\n   * - Splitting the empty string is not allowed (for now at least).\n   * - Empty segments within the string (e.g. if there are two consecutive\n   *   separators) are not allowed.\n   *\n   * TODO(b/37244157): we should make this more strict. Right now, it allows\n   * non-identifier path components, even if they aren't escaped.\n   */\n  static fromServerFormat(path: string): FieldPath {\n    const segments: string[] = [];\n    let current = '';\n    let i = 0;\n\n    const addCurrentSegment = (): void => {\n      if (current.length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field path (${path}). Paths must not be empty, begin ` +\n            `with '.', end with '.', or contain '..'`\n        );\n      }\n      segments.push(current);\n      current = '';\n    };\n\n    let inBackticks = false;\n\n    while (i < path.length) {\n      const c = path[i];\n      if (c === '\\\\') {\n        if (i + 1 === path.length) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has trailing escape character: ' + path\n          );\n        }\n        const next = path[i + 1];\n        if (!(next === '\\\\' || next === '.' || next === '`')) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has invalid escape sequence: ' + path\n          );\n        }\n        current += next;\n        i += 2;\n      } else if (c === '`') {\n        inBackticks = !inBackticks;\n        i++;\n      } else if (c === '.' && !inBackticks) {\n        addCurrentSegment();\n        i++;\n      } else {\n        current += c;\n        i++;\n      }\n    }\n    addCurrentSegment();\n\n    if (inBackticks) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Unterminated ` in path: ' + path\n      );\n    }\n\n    return new FieldPath(segments);\n  }\n\n  static emptyPath(): FieldPath {\n    return new FieldPath([]);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\n\nimport { ResourcePath } from './path';\n\nexport class DocumentKey {\n  constructor(readonly path: ResourcePath) {\n    debugAssert(\n      DocumentKey.isDocumentKey(path),\n      'Invalid DocumentKey with an odd number of segments: ' +\n        path.toArray().join('/')\n    );\n  }\n\n  static fromPath(path: string): DocumentKey {\n    return new DocumentKey(ResourcePath.fromString(path));\n  }\n\n  static fromName(name: string): DocumentKey {\n    return new DocumentKey(ResourcePath.fromString(name).popFirst(5));\n  }\n\n  /** Returns true if the document is in the specified collectionId. */\n  hasCollectionId(collectionId: string): boolean {\n    return (\n      this.path.length >= 2 &&\n      this.path.get(this.path.length - 2) === collectionId\n    );\n  }\n\n  isEqual(other: DocumentKey | null): boolean {\n    return (\n      other !== null && ResourcePath.comparator(this.path, other.path) === 0\n    );\n  }\n\n  toString(): string {\n    return this.path.toString();\n  }\n\n  static comparator(k1: DocumentKey, k2: DocumentKey): number {\n    return ResourcePath.comparator(k1.path, k2.path);\n  }\n\n  static isDocumentKey(path: ResourcePath): boolean {\n    return path.length % 2 === 0;\n  }\n\n  /**\n   * Creates and returns a new document key with the given segments.\n   *\n   * @param segments - The segments of the path to the document\n   * @returns A new instance of DocumentKey\n   */\n  static fromSegments(segments: string[]): DocumentKey {\n    return new DocumentKey(new ResourcePath(segments.slice()));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SetOptions } from '@firebase/firestore-types';\n\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\n\nimport { fail } from './assert';\nimport { Code, FirestoreError } from './error';\n\n/** Types accepted by validateType() and related methods for validation. */\nexport type ValidationType =\n  | 'undefined'\n  | 'object'\n  | 'function'\n  | 'boolean'\n  | 'number'\n  | 'string'\n  | 'non-empty string';\n\nexport function validateNonEmptyArgument(\n  functionName: string,\n  argumentName: string,\n  argument?: string\n): asserts argument is string {\n  if (!argument) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() cannot be called with an empty ${argumentName}.`\n    );\n  }\n}\n\nexport function validateSetOptions(\n  methodName: string,\n  options: SetOptions | undefined\n): SetOptions {\n  if (options === undefined) {\n    return {\n      merge: false\n    };\n  }\n\n  if (options.mergeFields !== undefined && options.merge !== undefined) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid options passed to function ${methodName}(): You cannot ` +\n        'specify both \"merge\" and \"mergeFields\".'\n    );\n  }\n\n  return options;\n}\n\n/**\n * Validates that two boolean options are not set at the same time.\n */\nexport function validateIsNotUsedTogether(\n  optionName1: string,\n  argument1: boolean | undefined,\n  optionName2: string,\n  argument2: boolean | undefined\n): void {\n  if (argument1 === true && argument2 === true) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `${optionName1} and ${optionName2} cannot be used together.`\n    );\n  }\n}\n\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nexport function validateDocumentPath(path: ResourcePath): void {\n  if (!DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid document reference. Document references must have an even number of segments, but ${path} has ${path.length}.`\n    );\n  }\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */\nexport function validateCollectionPath(path: ResourcePath): void {\n  if (DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid collection reference. Collection references must have an odd number of segments, but ${path} has ${path.length}.`\n    );\n  }\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nexport function isPlainObject(input: unknown): boolean {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    (Object.getPrototypeOf(input) === Object.prototype ||\n      Object.getPrototypeOf(input) === null)\n  );\n}\n\n/** Returns a string describing the type / value of the provided input. */\nexport function valueDescription(input: unknown): string {\n  if (input === undefined) {\n    return 'undefined';\n  } else if (input === null) {\n    return 'null';\n  } else if (typeof input === 'string') {\n    if (input.length > 20) {\n      input = `${input.substring(0, 20)}...`;\n    }\n    return JSON.stringify(input);\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return '' + input;\n  } else if (typeof input === 'object') {\n    if (input instanceof Array) {\n      return 'an array';\n    } else {\n      const customObjectName = tryGetCustomObjectType(input!);\n      if (customObjectName) {\n        return `a custom ${customObjectName} object`;\n      } else {\n        return 'an object';\n      }\n    }\n  } else if (typeof input === 'function') {\n    return 'a function';\n  } else {\n    return fail('Unknown wrong type: ' + typeof input);\n  }\n}\n\n/** Hacky method to try to get the constructor name for an object. */\nexport function tryGetCustomObjectType(input: object): string | null {\n  if (input.constructor) {\n    const funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n    const results = funcNameRegex.exec(input.constructor.toString());\n    if (results && results.length > 1) {\n      return results[1];\n    }\n  }\n  return null;\n}\n\n/**\n * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\n * underlying instance. Throws if  `obj` is not an instance of `T`.\n *\n * This cast is used in the Lite and Full SDK to verify instance types for\n * arguments passed to the public API.\n */\nexport function cast<T>(\n  obj: object,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor: { new (...args: any[]): T }\n): T | never {\n  if ('_delegate' in obj) {\n    // Unwrap Compat types\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj = (obj as any)._delegate;\n  }\n\n  if (!(obj instanceof constructor)) {\n    if (constructor.name === obj.constructor.name) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Type does not match the expected instance. Did you pass a ' +\n          `reference from a different Firestore SDK?`\n      );\n    } else {\n      const description = valueDescription(obj);\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Expected type '${constructor.name}', but it was: ${description}`\n      );\n    }\n  }\n  return obj as T;\n}\n\nexport function validatePositiveNumber(functionName: string, n: number): void {\n  if (n <= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires a positive number, but it was: ${n}.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return atob(encoded);\n}\n\n/** Converts a binary string to a Base64 encoded string. */\nexport function encodeBase64(raw: string): string {\n  return btoa(raw);\n}\n\n/** True if and only if the Base64 conversion functions are available. */\nexport function isBase64Available(): boolean {\n  return typeof atob !== 'undefined';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Compat } from '@firebase/util';\n\nimport { Bytes } from '../../exp/index';\nimport { isBase64Available } from '../platform/base64';\nimport { Code, FirestoreError } from '../util/error';\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable(): void {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Uint8Arrays are not available in this environment.'\n    );\n  }\n}\n\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available(): void {\n  if (!isBase64Available()) {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Blobs are unavailable in Firestore in this environment.'\n    );\n  }\n}\n\n/** Immutable class holding a blob (binary data) */\nexport class Blob implements Compat<Bytes> {\n  constructor(readonly _delegate: Bytes) {}\n  static fromBase64String(base64: string): Blob {\n    assertBase64Available();\n    return new Blob(Bytes.fromBase64String(base64));\n  }\n\n  static fromUint8Array(array: Uint8Array): Blob {\n    assertUint8ArrayAvailable();\n    return new Blob(Bytes.fromUint8Array(array));\n  }\n\n  toBase64(): string {\n    assertBase64Available();\n    return this._delegate.toBase64();\n  }\n\n  toUint8Array(): Uint8Array {\n    assertUint8ArrayAvailable();\n    return this._delegate.toUint8Array();\n  }\n\n  isEqual(other: Blob): boolean {\n    return this._delegate.isEqual(other._delegate);\n  }\n\n  toString(): string {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject } from '../model/object_value';\nimport { FirestoreError } from '../util/error';\n\n/**\n * Observer/Subscribe interfaces.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: FirestoreError) => void;\nexport type CompleteFn = () => void;\n\n// Allow for any of the Observer methods to be undefined.\nexport interface PartialObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n}\n\nexport function isPartialObserver<T>(obj: unknown): obj is PartialObserver<T> {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj: unknown, methods: string[]): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const object = obj as JsonObject<unknown>;\n  for (const method of methods) {\n    if (method in object && typeof object[method] === 'function') {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { _FirebaseApp, FirebaseService } from '@firebase/app-types/private';\nimport {\n  CollectionReference as PublicCollectionReference,\n  DocumentChange as PublicDocumentChange,\n  DocumentChangeType as PublicDocumentChangeType,\n  DocumentData,\n  DocumentData as PublicDocumentData,\n  DocumentReference as PublicDocumentReference,\n  DocumentSnapshot as PublicDocumentSnapshot,\n  FieldPath as PublicFieldPath,\n  FirebaseFirestore as PublicFirestore,\n  FirestoreDataConverter as PublicFirestoreDataConverter,\n  GetOptions as PublicGetOptions,\n  LogLevel as PublicLogLevel,\n  OrderByDirection as PublicOrderByDirection,\n  PersistenceSettings as PublicPersistenceSettings,\n  Query as PublicQuery,\n  QueryDocumentSnapshot as PublicQueryDocumentSnapshot,\n  QuerySnapshot as PublicQuerySnapshot,\n  SetOptions as PublicSetOptions,\n  Settings as PublicSettings,\n  SnapshotListenOptions as PublicSnapshotListenOptions,\n  SnapshotOptions as PublicSnapshotOptions,\n  Transaction as PublicTransaction,\n  UpdateData as PublicUpdateData,\n  WhereFilterOp as PublicWhereFilterOp,\n  WriteBatch as PublicWriteBatch\n} from '@firebase/firestore-types';\nimport {\n  Compat,\n  EmulatorMockTokenOptions,\n  getModularInstance\n} from '@firebase/util';\n\nimport {\n  LoadBundleTask,\n  Bytes,\n  clearIndexedDbPersistence,\n  disableNetwork,\n  enableIndexedDbPersistence,\n  enableMultiTabIndexedDbPersistence,\n  enableNetwork,\n  ensureFirestoreConfigured,\n  FirebaseFirestore as ExpFirebaseFirestore,\n  connectFirestoreEmulator,\n  waitForPendingWrites,\n  FieldPath as ExpFieldPath,\n  limit,\n  limitToLast,\n  where,\n  orderBy,\n  startAfter,\n  startAt,\n  query,\n  endBefore,\n  endAt,\n  doc,\n  collection,\n  collectionGroup,\n  queryEqual,\n  Query as ExpQuery,\n  CollectionReference as ExpCollectionReference,\n  DocumentReference as ExpDocumentReference,\n  refEqual,\n  addDoc,\n  deleteDoc,\n  executeWrite,\n  getDoc,\n  getDocFromCache,\n  getDocFromServer,\n  getDocs,\n  getDocsFromCache,\n  getDocsFromServer,\n  onSnapshot,\n  onSnapshotsInSync,\n  setDoc,\n  updateDoc,\n  Unsubscribe,\n  DocumentChange as ExpDocumentChange,\n  DocumentSnapshot as ExpDocumentSnapshot,\n  QueryDocumentSnapshot as ExpQueryDocumentSnapshot,\n  QuerySnapshot as ExpQuerySnapshot,\n  snapshotEqual,\n  SnapshotMetadata,\n  runTransaction,\n  Transaction as ExpTransaction,\n  WriteBatch as ExpWriteBatch,\n  AbstractUserDataWriter\n} from '../../exp/index'; // import from the exp public API\nimport { DatabaseId } from '../core/database_info';\nimport { UntypedFirestoreDataConverter } from '../lite/user_data_reader';\nimport { DocumentKey } from '../model/document_key';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { debugAssert } from '../util/assert';\nimport { ByteString } from '../util/byte_string';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  cast,\n  validateIsNotUsedTogether,\n  validateSetOptions\n} from '../util/input_validation';\nimport { logWarn, setLogLevel as setClientLogLevel } from '../util/log';\n\nimport { Blob } from './blob';\nimport {\n  CompleteFn,\n  ErrorFn,\n  isPartialObserver,\n  NextFn,\n  PartialObserver\n} from './observer';\n\n/**\n * A persistence provider for either memory-only or IndexedDB persistence.\n * Mainly used to allow optional inclusion of IndexedDB code.\n */\nexport interface PersistenceProvider {\n  enableIndexedDbPersistence(\n    firestore: Firestore,\n    forceOwnership: boolean\n  ): Promise<void>;\n  enableMultiTabIndexedDbPersistence(firestore: Firestore): Promise<void>;\n  clearIndexedDbPersistence(firestore: Firestore): Promise<void>;\n}\n\nconst MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE =\n  'You are using the memory-only build of Firestore. Persistence support is ' +\n  'only available via the @firebase/firestore bundle or the ' +\n  'firebase-firestore.js build.';\n\n/**\n * The persistence provider included with the memory-only SDK. This provider\n * errors for all attempts to access persistence.\n */\nexport class MemoryPersistenceProvider implements PersistenceProvider {\n  enableIndexedDbPersistence(\n    firestore: Firestore,\n    forceOwnership: boolean\n  ): Promise<void> {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE\n    );\n  }\n\n  enableMultiTabIndexedDbPersistence(firestore: Firestore): Promise<void> {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE\n    );\n  }\n\n  clearIndexedDbPersistence(firestore: Firestore): Promise<void> {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE\n    );\n  }\n}\n\n/**\n * The persistence provider included with the full Firestore SDK.\n */\nexport class IndexedDbPersistenceProvider implements PersistenceProvider {\n  enableIndexedDbPersistence(\n    firestore: Firestore,\n    forceOwnership: boolean\n  ): Promise<void> {\n    return enableIndexedDbPersistence(firestore._delegate, { forceOwnership });\n  }\n  enableMultiTabIndexedDbPersistence(firestore: Firestore): Promise<void> {\n    return enableMultiTabIndexedDbPersistence(firestore._delegate);\n  }\n  clearIndexedDbPersistence(firestore: Firestore): Promise<void> {\n    return clearIndexedDbPersistence(firestore._delegate);\n  }\n}\n\n/**\n * Compat class for Firestore. Exposes Firestore Legacy API, but delegates\n * to the functional API of firestore-exp.\n */\nexport class Firestore\n  implements PublicFirestore, FirebaseService, Compat<ExpFirebaseFirestore>\n{\n  _appCompat?: FirebaseApp;\n  constructor(\n    databaseIdOrApp: DatabaseId | FirebaseApp,\n    readonly _delegate: ExpFirebaseFirestore,\n    private _persistenceProvider: PersistenceProvider\n  ) {\n    if (!(databaseIdOrApp instanceof DatabaseId)) {\n      this._appCompat = databaseIdOrApp as FirebaseApp;\n    }\n  }\n\n  get _databaseId(): DatabaseId {\n    return this._delegate._databaseId;\n  }\n\n  settings(settingsLiteral: PublicSettings): void {\n    const currentSettings = this._delegate._getSettings();\n    if (\n      !settingsLiteral.merge &&\n      currentSettings.host !== settingsLiteral.host\n    ) {\n      logWarn(\n        'You are overriding the original host. If you did not intend ' +\n          'to override your settings, use {merge: true}.'\n      );\n    }\n\n    if (settingsLiteral.merge) {\n      settingsLiteral = {\n        ...currentSettings,\n        ...settingsLiteral\n      };\n      // Remove the property from the settings once the merge is completed\n      delete settingsLiteral.merge;\n    }\n\n    this._delegate._setSettings(settingsLiteral);\n  }\n\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions;\n    } = {}\n  ): void {\n    connectFirestoreEmulator(this._delegate, host, port, options);\n  }\n\n  enableNetwork(): Promise<void> {\n    return enableNetwork(this._delegate);\n  }\n\n  disableNetwork(): Promise<void> {\n    return disableNetwork(this._delegate);\n  }\n\n  enablePersistence(settings?: PublicPersistenceSettings): Promise<void> {\n    let synchronizeTabs = false;\n    let experimentalForceOwningTab = false;\n\n    if (settings) {\n      synchronizeTabs = !!settings.synchronizeTabs;\n      experimentalForceOwningTab = !!settings.experimentalForceOwningTab;\n\n      validateIsNotUsedTogether(\n        'synchronizeTabs',\n        synchronizeTabs,\n        'experimentalForceOwningTab',\n        experimentalForceOwningTab\n      );\n    }\n\n    return synchronizeTabs\n      ? this._persistenceProvider.enableMultiTabIndexedDbPersistence(this)\n      : this._persistenceProvider.enableIndexedDbPersistence(\n          this,\n          experimentalForceOwningTab\n        );\n  }\n\n  clearPersistence(): Promise<void> {\n    return this._persistenceProvider.clearIndexedDbPersistence(this);\n  }\n\n  terminate(): Promise<void> {\n    if (this._appCompat) {\n      (this._appCompat as _FirebaseApp)._removeServiceInstance('firestore');\n      (this._appCompat as _FirebaseApp)._removeServiceInstance('firestore-exp');\n    }\n    return this._delegate._delete();\n  }\n\n  waitForPendingWrites(): Promise<void> {\n    return waitForPendingWrites(this._delegate);\n  }\n\n  onSnapshotsInSync(observer: PartialObserver<void>): Unsubscribe;\n  onSnapshotsInSync(onSync: () => void): Unsubscribe;\n  onSnapshotsInSync(arg: unknown): Unsubscribe {\n    return onSnapshotsInSync(this._delegate, arg as PartialObserver<void>);\n  }\n\n  get app(): FirebaseApp {\n    if (!this._appCompat) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n          'not available'\n      );\n    }\n    return this._appCompat as FirebaseApp;\n  }\n\n  INTERNAL = {\n    delete: () => this.terminate()\n  };\n\n  collection(pathString: string): PublicCollectionReference {\n    try {\n      return new CollectionReference(\n        this,\n        collection(this._delegate, pathString)\n      );\n    } catch (e) {\n      throw replaceFunctionName(e, 'collection()', 'Firestore.collection()');\n    }\n  }\n\n  doc(pathString: string): PublicDocumentReference {\n    try {\n      return new DocumentReference(this, doc(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e, 'doc()', 'Firestore.doc()');\n    }\n  }\n\n  collectionGroup(collectionId: string): PublicQuery {\n    try {\n      return new Query(this, collectionGroup(this._delegate, collectionId));\n    } catch (e) {\n      throw replaceFunctionName(\n        e,\n        'collectionGroup()',\n        'Firestore.collectionGroup()'\n      );\n    }\n  }\n\n  runTransaction<T>(\n    updateFunction: (transaction: PublicTransaction) => Promise<T>\n  ): Promise<T> {\n    return runTransaction(this._delegate, transaction =>\n      updateFunction(new Transaction(this, transaction))\n    );\n  }\n\n  batch(): PublicWriteBatch {\n    ensureFirestoreConfigured(this._delegate);\n    return new WriteBatch(\n      new ExpWriteBatch(this._delegate, mutations =>\n        executeWrite(this._delegate, mutations)\n      )\n    );\n  }\n\n  loadBundle(\n    bundleData: ArrayBuffer | ReadableStream<ArrayBuffer> | string\n  ): LoadBundleTask {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      '\"loadBundle()\" does not exist, have you imported \"firebase/firestore/bundle\"?'\n    );\n  }\n\n  namedQuery(name: string): Promise<PublicQuery<DocumentData> | null> {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      '\"namedQuery()\" does not exist, have you imported \"firebase/firestore/bundle\"?'\n    );\n  }\n}\n\nexport class UserDataWriter extends AbstractUserDataWriter {\n  constructor(protected firestore: Firestore) {\n    super();\n  }\n\n  protected convertBytes(bytes: ByteString): Blob {\n    return new Blob(new Bytes(bytes));\n  }\n\n  protected convertReference(name: string): DocumentReference {\n    const key = this.convertDocumentKey(name, this.firestore._databaseId);\n    return DocumentReference.forKey(key, this.firestore, /* converter= */ null);\n  }\n}\n\nexport function setLogLevel(level: PublicLogLevel): void {\n  setClientLogLevel(level);\n}\n\n/**\n * A reference to a transaction.\n */\nexport class Transaction implements PublicTransaction, Compat<ExpTransaction> {\n  private _userDataWriter: UserDataWriter;\n\n  constructor(\n    private readonly _firestore: Firestore,\n    readonly _delegate: ExpTransaction\n  ) {\n    this._userDataWriter = new UserDataWriter(_firestore);\n  }\n\n  get<T>(\n    documentRef: PublicDocumentReference<T>\n  ): Promise<PublicDocumentSnapshot<T>> {\n    const ref = castReference(documentRef);\n    return this._delegate\n      .get(ref)\n      .then(\n        result =>\n          new DocumentSnapshot(\n            this._firestore,\n            new ExpDocumentSnapshot<T>(\n              this._firestore._delegate,\n              this._userDataWriter,\n              result._key,\n              result._document,\n              result.metadata,\n              ref.converter\n            )\n          )\n      );\n  }\n\n  set<T>(\n    documentRef: DocumentReference<T>,\n    data: Partial<T>,\n    options: PublicSetOptions\n  ): Transaction;\n  set<T>(documentRef: DocumentReference<T>, data: T): Transaction;\n  set<T>(\n    documentRef: PublicDocumentReference<T>,\n    data: T | Partial<T>,\n    options?: PublicSetOptions\n  ): Transaction {\n    const ref = castReference(documentRef);\n    if (options) {\n      validateSetOptions('Transaction.set', options);\n      this._delegate.set(ref, data, options);\n    } else {\n      this._delegate.set(ref, data);\n    }\n    return this;\n  }\n\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    data: PublicUpdateData\n  ): Transaction;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    field: string | PublicFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    dataOrField: unknown,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction {\n    const ref = castReference(documentRef);\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField as PublicUpdateData);\n    } else {\n      this._delegate.update(\n        ref,\n        dataOrField as string | ExpFieldPath,\n        value,\n        ...moreFieldsAndValues\n      );\n    }\n\n    return this;\n  }\n\n  delete(documentRef: PublicDocumentReference<unknown>): Transaction {\n    const ref = castReference(documentRef);\n    this._delegate.delete(ref);\n    return this;\n  }\n}\n\nexport class WriteBatch implements PublicWriteBatch, Compat<ExpWriteBatch> {\n  constructor(readonly _delegate: ExpWriteBatch) {}\n  set<T>(\n    documentRef: DocumentReference<T>,\n    data: Partial<T>,\n    options: PublicSetOptions\n  ): WriteBatch;\n  set<T>(documentRef: DocumentReference<T>, data: T): WriteBatch;\n  set<T>(\n    documentRef: PublicDocumentReference<T>,\n    data: T | Partial<T>,\n    options?: PublicSetOptions\n  ): WriteBatch {\n    const ref = castReference(documentRef);\n    if (options) {\n      validateSetOptions('WriteBatch.set', options);\n      this._delegate.set(ref, data, options);\n    } else {\n      this._delegate.set(ref, data);\n    }\n    return this;\n  }\n\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    data: PublicUpdateData\n  ): WriteBatch;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    field: string | PublicFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch;\n  update(\n    documentRef: PublicDocumentReference<unknown>,\n    dataOrField: string | PublicFieldPath | PublicUpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch {\n    const ref = castReference(documentRef);\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField as PublicUpdateData);\n    } else {\n      this._delegate.update(\n        ref,\n        dataOrField as string | ExpFieldPath,\n        value,\n        ...moreFieldsAndValues\n      );\n    }\n    return this;\n  }\n\n  delete(documentRef: PublicDocumentReference<unknown>): WriteBatch {\n    const ref = castReference(documentRef);\n    this._delegate.delete(ref);\n    return this;\n  }\n\n  commit(): Promise<void> {\n    return this._delegate.commit();\n  }\n}\n\n/**\n * Wraps a `PublicFirestoreDataConverter` translating the types from the\n * experimental SDK into corresponding types from the Classic SDK before passing\n * them to the wrapped converter.\n */\nclass FirestoreDataConverter<U>\n  implements\n    UntypedFirestoreDataConverter<U>,\n    Compat<PublicFirestoreDataConverter<U>>\n{\n  private static readonly INSTANCES = new WeakMap();\n\n  private constructor(\n    private readonly _firestore: Firestore,\n    private readonly _userDataWriter: UserDataWriter,\n    readonly _delegate: PublicFirestoreDataConverter<U>\n  ) {}\n\n  fromFirestore(\n    snapshot: ExpQueryDocumentSnapshot,\n    options?: PublicSnapshotOptions\n  ): U {\n    const expSnapshot = new ExpQueryDocumentSnapshot(\n      this._firestore._delegate,\n      this._userDataWriter,\n      snapshot._key,\n      snapshot._document,\n      snapshot.metadata,\n      /* converter= */ null\n    );\n    return this._delegate.fromFirestore(\n      new QueryDocumentSnapshot(this._firestore, expSnapshot),\n      options ?? {}\n    );\n  }\n\n  toFirestore(modelObject: U): PublicDocumentData;\n  toFirestore(\n    modelObject: Partial<U>,\n    options: PublicSetOptions\n  ): PublicDocumentData;\n  toFirestore(\n    modelObject: U | Partial<U>,\n    options?: PublicSetOptions\n  ): PublicDocumentData {\n    if (!options) {\n      return this._delegate.toFirestore(modelObject as U);\n    } else {\n      return this._delegate.toFirestore(modelObject, options);\n    }\n  }\n\n  // Use the same instance of `FirestoreDataConverter` for the given instances\n  // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will\n  // compare equal for two objects created with the same converter instance.\n  static getInstance<U>(\n    firestore: Firestore,\n    converter: PublicFirestoreDataConverter<U>\n  ): FirestoreDataConverter<U> {\n    const converterMapByFirestore = FirestoreDataConverter.INSTANCES;\n    let untypedConverterByConverter = converterMapByFirestore.get(firestore);\n    if (!untypedConverterByConverter) {\n      untypedConverterByConverter = new WeakMap();\n      converterMapByFirestore.set(firestore, untypedConverterByConverter);\n    }\n\n    let instance = untypedConverterByConverter.get(converter);\n    if (!instance) {\n      instance = new FirestoreDataConverter(\n        firestore,\n        new UserDataWriter(firestore),\n        converter\n      );\n      untypedConverterByConverter.set(converter, instance);\n    }\n\n    return instance;\n  }\n}\n\n/**\n * A reference to a particular document in a collection in the database.\n */\nexport class DocumentReference<T = PublicDocumentData>\n  implements PublicDocumentReference<T>, Compat<ExpDocumentReference<T>>\n{\n  private _userDataWriter: UserDataWriter;\n\n  constructor(\n    readonly firestore: Firestore,\n    readonly _delegate: ExpDocumentReference<T>\n  ) {\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  static forPath<U>(\n    path: ResourcePath,\n    firestore: Firestore,\n    converter: UntypedFirestoreDataConverter<U> | null\n  ): DocumentReference<U> {\n    if (path.length % 2 !== 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid document reference. Document ' +\n          'references must have an even number of segments, but ' +\n          `${path.canonicalString()} has ${path.length}`\n      );\n    }\n    return new DocumentReference(\n      firestore,\n      new ExpDocumentReference(\n        firestore._delegate,\n        converter,\n        new DocumentKey(path)\n      )\n    );\n  }\n\n  static forKey<U>(\n    key: DocumentKey,\n    firestore: Firestore,\n    converter: UntypedFirestoreDataConverter<U> | null\n  ): DocumentReference<U> {\n    return new DocumentReference(\n      firestore,\n      new ExpDocumentReference(firestore._delegate, converter, key)\n    );\n  }\n\n  get id(): string {\n    return this._delegate.id;\n  }\n\n  get parent(): PublicCollectionReference<T> {\n    return new CollectionReference(this.firestore, this._delegate.parent);\n  }\n\n  get path(): string {\n    return this._delegate.path;\n  }\n\n  collection(\n    pathString: string\n  ): PublicCollectionReference<PublicDocumentData> {\n    try {\n      return new CollectionReference(\n        this.firestore,\n        collection(this._delegate, pathString)\n      );\n    } catch (e) {\n      throw replaceFunctionName(\n        e,\n        'collection()',\n        'DocumentReference.collection()'\n      );\n    }\n  }\n\n  isEqual(other: PublicDocumentReference<T>): boolean {\n    other = getModularInstance<PublicDocumentReference<T>>(other);\n\n    if (!(other instanceof ExpDocumentReference)) {\n      return false;\n    }\n    return refEqual(this._delegate, other);\n  }\n\n  set(value: Partial<T>, options: PublicSetOptions): Promise<void>;\n  set(value: T): Promise<void>;\n  set(value: T | Partial<T>, options?: PublicSetOptions): Promise<void> {\n    options = validateSetOptions('DocumentReference.set', options);\n    try {\n      return setDoc(this._delegate, value, options);\n    } catch (e) {\n      throw replaceFunctionName(e, 'setDoc()', 'DocumentReference.set()');\n    }\n  }\n\n  update(value: PublicUpdateData): Promise<void>;\n  update(\n    field: string | PublicFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void>;\n  update(\n    fieldOrUpdateData: string | PublicFieldPath | PublicUpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void> {\n    try {\n      if (arguments.length === 1) {\n        return updateDoc(this._delegate, fieldOrUpdateData as PublicUpdateData);\n      } else {\n        return updateDoc(\n          this._delegate,\n          fieldOrUpdateData as string | ExpFieldPath,\n          value,\n          ...moreFieldsAndValues\n        );\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'updateDoc()', 'DocumentReference.update()');\n    }\n  }\n\n  delete(): Promise<void> {\n    return deleteDoc(this._delegate);\n  }\n\n  onSnapshot(observer: PartialObserver<PublicDocumentSnapshot<T>>): Unsubscribe;\n  onSnapshot(\n    options: PublicSnapshotListenOptions,\n    observer: PartialObserver<PublicDocumentSnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<PublicDocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: PublicSnapshotListenOptions,\n    onNext: NextFn<PublicDocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    const options = extractSnapshotOptions(args);\n    const observer = wrapObserver<DocumentSnapshot<T>, ExpDocumentSnapshot<T>>(\n      args,\n      result =>\n        new DocumentSnapshot(\n          this.firestore,\n          new ExpDocumentSnapshot(\n            this.firestore._delegate,\n            this._userDataWriter,\n            result._key,\n            result._document,\n            result.metadata,\n            this._delegate.converter\n          )\n        )\n    );\n    return onSnapshot(this._delegate, options, observer);\n  }\n\n  get(options?: PublicGetOptions): Promise<PublicDocumentSnapshot<T>> {\n    let snap: Promise<ExpDocumentSnapshot<T>>;\n    if (options?.source === 'cache') {\n      snap = getDocFromCache(this._delegate);\n    } else if (options?.source === 'server') {\n      snap = getDocFromServer(this._delegate);\n    } else {\n      snap = getDoc(this._delegate);\n    }\n\n    return snap.then(\n      result =>\n        new DocumentSnapshot(\n          this.firestore,\n          new ExpDocumentSnapshot(\n            this.firestore._delegate,\n            this._userDataWriter,\n            result._key,\n            result._document,\n            result.metadata,\n            this._delegate.converter as UntypedFirestoreDataConverter<T>\n          )\n        )\n    );\n  }\n\n  withConverter(converter: null): PublicDocumentReference<PublicDocumentData>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U>\n  ): PublicDocumentReference<U>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U> | null\n  ): PublicDocumentReference<U> {\n    return new DocumentReference<U>(\n      this.firestore,\n      converter\n        ? this._delegate.withConverter(\n            FirestoreDataConverter.getInstance(this.firestore, converter)\n          )\n        : (this._delegate.withConverter(null) as ExpDocumentReference<U>)\n    );\n  }\n}\n\n/**\n * Replaces the function name in an error thrown by the firestore-exp API\n * with the function names used in the classic API.\n */\nfunction replaceFunctionName(\n  e: Error,\n  original: string | RegExp,\n  updated: string\n): Error {\n  e.message = e.message.replace(original, updated);\n  return e;\n}\n\n/**\n * Iterates the list of arguments from an `onSnapshot` call and returns the\n * first argument that may be an `SnapshotListenOptions` object. Returns an\n * empty object if none is found.\n */\nexport function extractSnapshotOptions(\n  args: unknown[]\n): PublicSnapshotListenOptions {\n  for (const arg of args) {\n    if (typeof arg === 'object' && !isPartialObserver(arg)) {\n      return arg as PublicSnapshotListenOptions;\n    }\n  }\n  return {};\n}\n\n/**\n * Creates an observer that can be passed to the firestore-exp SDK. The\n * observer converts all observed values into the format expected by the classic\n * SDK.\n *\n * @param args - The list of arguments from an `onSnapshot` call.\n * @param wrapper - The function that converts the firestore-exp type into the\n * type used by this shim.\n */\nexport function wrapObserver<CompatType, ExpType>(\n  args: unknown[],\n  wrapper: (val: ExpType) => CompatType\n): PartialObserver<ExpType> {\n  let userObserver: PartialObserver<CompatType>;\n  if (isPartialObserver(args[0])) {\n    userObserver = args[0] as PartialObserver<CompatType>;\n  } else if (isPartialObserver(args[1])) {\n    userObserver = args[1];\n  } else if (typeof args[0] === 'function') {\n    userObserver = {\n      next: args[0] as NextFn<CompatType> | undefined,\n      error: args[1] as ErrorFn | undefined,\n      complete: args[2] as CompleteFn | undefined\n    };\n  } else {\n    userObserver = {\n      next: args[1] as NextFn<CompatType> | undefined,\n      error: args[2] as ErrorFn | undefined,\n      complete: args[3] as CompleteFn | undefined\n    };\n  }\n\n  return {\n    next: val => {\n      if (userObserver!.next) {\n        userObserver!.next(wrapper(val));\n      }\n    },\n    error: userObserver.error?.bind(userObserver),\n    complete: userObserver.complete?.bind(userObserver)\n  };\n}\n\n/**\n * Options interface that can be provided to configure the deserialization of\n * DocumentSnapshots.\n */\nexport interface SnapshotOptions extends PublicSnapshotOptions {}\n\nexport class DocumentSnapshot<T = PublicDocumentData>\n  implements PublicDocumentSnapshot<T>, Compat<ExpDocumentSnapshot<T>>\n{\n  constructor(\n    private readonly _firestore: Firestore,\n    readonly _delegate: ExpDocumentSnapshot<T>\n  ) {}\n\n  get ref(): DocumentReference<T> {\n    return new DocumentReference<T>(this._firestore, this._delegate.ref);\n  }\n\n  get id(): string {\n    return this._delegate.id;\n  }\n\n  get metadata(): SnapshotMetadata {\n    return this._delegate.metadata;\n  }\n\n  get exists(): boolean {\n    return this._delegate.exists();\n  }\n\n  data(options?: PublicSnapshotOptions): T | undefined {\n    return this._delegate.data(options);\n  }\n\n  get(\n    fieldPath: string | PublicFieldPath,\n    options?: PublicSnapshotOptions\n    // We are using `any` here to avoid an explicit cast by our users.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any {\n    return this._delegate.get(fieldPath as string | ExpFieldPath, options);\n  }\n\n  isEqual(other: DocumentSnapshot<T>): boolean {\n    return snapshotEqual(this._delegate, other._delegate);\n  }\n}\n\nexport class QueryDocumentSnapshot<T = PublicDocumentData>\n  extends DocumentSnapshot<T>\n  implements PublicQueryDocumentSnapshot<T>\n{\n  data(options?: PublicSnapshotOptions): T {\n    const data = this._delegate.data(options);\n    debugAssert(\n      data !== undefined,\n      'Document in a QueryDocumentSnapshot should exist'\n    );\n    return data;\n  }\n}\n\nexport class Query<T = PublicDocumentData>\n  implements PublicQuery<T>, Compat<ExpQuery<T>>\n{\n  private readonly _userDataWriter: UserDataWriter;\n\n  constructor(readonly firestore: Firestore, readonly _delegate: ExpQuery<T>) {\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  where(\n    fieldPath: string | FieldPath,\n    opStr: PublicWhereFilterOp,\n    value: unknown\n  ): Query<T> {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `where` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query<T>(\n        this.firestore,\n        query(this._delegate, where(fieldPath as string, opStr, value))\n      );\n    } catch (e) {\n      throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\n    }\n  }\n\n  orderBy(\n    fieldPath: string | FieldPath,\n    directionStr?: PublicOrderByDirection\n  ): Query<T> {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `orderBy` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query<T>(\n        this.firestore,\n        query(this._delegate, orderBy(fieldPath as string, directionStr))\n      );\n    } catch (e) {\n      throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\n    }\n  }\n\n  limit(n: number): Query<T> {\n    try {\n      return new Query<T>(this.firestore, query(this._delegate, limit(n)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'limit()', 'Query.limit()');\n    }\n  }\n\n  limitToLast(n: number): Query<T> {\n    try {\n      return new Query<T>(\n        this.firestore,\n        query(this._delegate, limitToLast(n))\n      );\n    } catch (e) {\n      throw replaceFunctionName(e, 'limitToLast()', 'Query.limitToLast()');\n    }\n  }\n\n  startAt(...args: any[]): Query<T> {\n    try {\n      return new Query(this.firestore, query(this._delegate, startAt(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'startAt()', 'Query.startAt()');\n    }\n  }\n\n  startAfter(...args: any[]): Query<T> {\n    try {\n      return new Query(\n        this.firestore,\n        query(this._delegate, startAfter(...args))\n      );\n    } catch (e) {\n      throw replaceFunctionName(e, 'startAfter()', 'Query.startAfter()');\n    }\n  }\n\n  endBefore(...args: any[]): Query<T> {\n    try {\n      return new Query(\n        this.firestore,\n        query(this._delegate, endBefore(...args))\n      );\n    } catch (e) {\n      throw replaceFunctionName(e, 'endBefore()', 'Query.endBefore()');\n    }\n  }\n\n  endAt(...args: any[]): Query<T> {\n    try {\n      return new Query(this.firestore, query(this._delegate, endAt(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'endAt()', 'Query.endAt()');\n    }\n  }\n\n  isEqual(other: PublicQuery<T>): boolean {\n    return queryEqual(this._delegate, (other as Query<T>)._delegate);\n  }\n\n  get(options?: PublicGetOptions): Promise<QuerySnapshot<T>> {\n    let query: Promise<ExpQuerySnapshot<T>>;\n    if (options?.source === 'cache') {\n      query = getDocsFromCache(this._delegate);\n    } else if (options?.source === 'server') {\n      query = getDocsFromServer(this._delegate);\n    } else {\n      query = getDocs(this._delegate);\n    }\n    return query.then(\n      result =>\n        new QuerySnapshot(\n          this.firestore,\n          new ExpQuerySnapshot<T>(\n            this.firestore._delegate,\n            this._userDataWriter,\n            this._delegate,\n            result._snapshot\n          )\n        )\n    );\n  }\n\n  onSnapshot(observer: PartialObserver<PublicQuerySnapshot<T>>): Unsubscribe;\n  onSnapshot(\n    options: PublicSnapshotListenOptions,\n    observer: PartialObserver<PublicQuerySnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<PublicQuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: PublicSnapshotListenOptions,\n    onNext: NextFn<PublicQuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    const options = extractSnapshotOptions(args);\n    const observer = wrapObserver<QuerySnapshot<T>, ExpQuerySnapshot<T>>(\n      args,\n      snap =>\n        new QuerySnapshot(\n          this.firestore,\n          new ExpQuerySnapshot<T>(\n            this.firestore._delegate,\n            this._userDataWriter,\n            this._delegate,\n            snap._snapshot\n          )\n        )\n    );\n    return onSnapshot(this._delegate, options, observer);\n  }\n\n  withConverter(converter: null): Query<PublicDocumentData>;\n  withConverter<U>(converter: PublicFirestoreDataConverter<U>): Query<U>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U> | null\n  ): Query<U> {\n    return new Query<U>(\n      this.firestore,\n      converter\n        ? this._delegate.withConverter(\n            FirestoreDataConverter.getInstance(this.firestore, converter)\n          )\n        : (this._delegate.withConverter(null) as ExpQuery<U>)\n    );\n  }\n}\n\nexport class DocumentChange<T = PublicDocumentData>\n  implements PublicDocumentChange<T>, Compat<ExpDocumentChange<T>>\n{\n  constructor(\n    private readonly _firestore: Firestore,\n    readonly _delegate: ExpDocumentChange<T>\n  ) {}\n\n  get type(): PublicDocumentChangeType {\n    return this._delegate.type;\n  }\n\n  get doc(): QueryDocumentSnapshot<T> {\n    return new QueryDocumentSnapshot<T>(this._firestore, this._delegate.doc);\n  }\n\n  get oldIndex(): number {\n    return this._delegate.oldIndex;\n  }\n\n  get newIndex(): number {\n    return this._delegate.newIndex;\n  }\n}\n\nexport class QuerySnapshot<T = PublicDocumentData>\n  implements PublicQuerySnapshot<T>, Compat<ExpQuerySnapshot<T>>\n{\n  constructor(\n    readonly _firestore: Firestore,\n    readonly _delegate: ExpQuerySnapshot<T>\n  ) {}\n\n  get query(): Query<T> {\n    return new Query(this._firestore, this._delegate.query);\n  }\n\n  get metadata(): SnapshotMetadata {\n    return this._delegate.metadata;\n  }\n\n  get size(): number {\n    return this._delegate.size;\n  }\n\n  get empty(): boolean {\n    return this._delegate.empty;\n  }\n\n  get docs(): Array<QueryDocumentSnapshot<T>> {\n    return this._delegate.docs.map(\n      doc => new QueryDocumentSnapshot<T>(this._firestore, doc)\n    );\n  }\n\n  docChanges(\n    options?: PublicSnapshotListenOptions\n  ): Array<PublicDocumentChange<T>> {\n    return this._delegate\n      .docChanges(options)\n      .map(docChange => new DocumentChange<T>(this._firestore, docChange));\n  }\n\n  forEach(\n    callback: (result: QueryDocumentSnapshot<T>) => void,\n    thisArg?: unknown\n  ): void {\n    this._delegate.forEach(snapshot => {\n      callback.call(\n        thisArg,\n        new QueryDocumentSnapshot(this._firestore, snapshot)\n      );\n    });\n  }\n\n  isEqual(other: QuerySnapshot<T>): boolean {\n    return snapshotEqual(this._delegate, other._delegate);\n  }\n}\n\nexport class CollectionReference<T = PublicDocumentData>\n  extends Query<T>\n  implements PublicCollectionReference<T>\n{\n  constructor(\n    readonly firestore: Firestore,\n    readonly _delegate: ExpCollectionReference<T>\n  ) {\n    super(firestore, _delegate);\n  }\n\n  get id(): string {\n    return this._delegate.id;\n  }\n\n  get path(): string {\n    return this._delegate.path;\n  }\n\n  get parent(): DocumentReference<PublicDocumentData> | null {\n    const docRef = this._delegate.parent;\n    return docRef ? new DocumentReference(this.firestore, docRef) : null;\n  }\n\n  doc(documentPath?: string): DocumentReference<T> {\n    try {\n      if (documentPath === undefined) {\n        // Call `doc` without `documentPath` if `documentPath` is `undefined`\n        // as `doc` validates the number of arguments to prevent users from\n        // accidentally passing `undefined`.\n        return new DocumentReference(this.firestore, doc(this._delegate));\n      } else {\n        return new DocumentReference(\n          this.firestore,\n          doc(this._delegate, documentPath)\n        );\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'doc()', 'CollectionReference.doc()');\n    }\n  }\n\n  add(data: T): Promise<DocumentReference<T>> {\n    return addDoc(this._delegate, data).then(\n      docRef => new DocumentReference(this.firestore, docRef)\n    );\n  }\n\n  isEqual(other: CollectionReference<T>): boolean {\n    return refEqual(this._delegate, other._delegate);\n  }\n\n  withConverter(converter: null): CollectionReference<PublicDocumentData>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U>\n  ): CollectionReference<U>;\n  withConverter<U>(\n    converter: PublicFirestoreDataConverter<U> | null\n  ): CollectionReference<U> {\n    return new CollectionReference<U>(\n      this.firestore,\n      converter\n        ? this._delegate.withConverter(\n            FirestoreDataConverter.getInstance(this.firestore, converter)\n          )\n        : (this._delegate.withConverter(null) as ExpCollectionReference<U>)\n    );\n  }\n}\n\nfunction castReference<T>(\n  documentRef: PublicDocumentReference<T>\n): ExpDocumentReference<T> {\n  return cast<ExpDocumentReference<T>>(documentRef, ExpDocumentReference);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  loadBundle as expLoadBundle,\n  namedQuery as expNamedQuery,\n  LoadBundleTask\n} from '../exp/index';\nimport { Firestore, Query } from '../src/api/database';\n\nexport function loadBundle(\n  this: Firestore,\n  data: ArrayBuffer | ReadableStream<Uint8Array> | string\n): LoadBundleTask {\n  return expLoadBundle(this._delegate, data);\n}\n\nexport function namedQuery(\n  this: Firestore,\n  queryName: string\n): Promise<Query | null> {\n  return expNamedQuery(this._delegate, queryName).then(expQuery => {\n    if (!expQuery) {\n      return null;\n    }\n    return new Query(\n      this,\n      // We can pass `expQuery` here directly since named queries don't have a UserDataConverter.\n      // Otherwise, we would have to create a new ExpQuery and pass the old UserDataConverter.\n      expQuery\n    );\n  });\n}\n\n/**\n * Prototype patches bundle loading to Firestore.\n */\nexport function registerBundle(instance: typeof Firestore): void {\n  instance.prototype.loadBundle = loadBundle;\n  instance.prototype.namedQuery = namedQuery;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FieldPath as PublicFieldPath } from '@firebase/firestore-types';\nimport { Compat, getModularInstance } from '@firebase/util';\n\nimport { FieldPath as ExpFieldPath } from '../../exp/index';\nimport { FieldPath as InternalFieldPath } from '../model/path';\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a list\n * of field names (referring to a nested field in the document).\n */\nexport class FieldPath implements PublicFieldPath, Compat<ExpFieldPath> {\n  readonly _delegate: ExpFieldPath;\n  /**\n   * Creates a FieldPath from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames - A list of field names.\n   */\n  constructor(...fieldNames: string[]) {\n    this._delegate = new ExpFieldPath(...fieldNames);\n  }\n\n  static documentId(): FieldPath {\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    return new FieldPath(InternalFieldPath.keyField().canonicalString());\n  }\n\n  isEqual(other: PublicFieldPath): boolean {\n    other = getModularInstance(other);\n\n    if (!(other instanceof ExpFieldPath)) {\n      return false;\n    }\n    return this._delegate._internalPath.isEqual(other._internalPath);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FieldValue as PublicFieldValue } from '@firebase/firestore-types';\nimport { Compat } from '@firebase/util';\n\nimport {\n  arrayRemove,\n  arrayUnion,\n  deleteField,\n  FieldValue as FieldValue1,\n  increment,\n  serverTimestamp\n} from '../../exp/index';\n\nexport class FieldValue implements PublicFieldValue, Compat<FieldValue1> {\n  static serverTimestamp(): FieldValue {\n    const delegate = serverTimestamp();\n    delegate._methodName = 'FieldValue.serverTimestamp';\n    return new FieldValue(delegate);\n  }\n\n  static delete(): FieldValue {\n    const delegate = deleteField();\n    delegate._methodName = 'FieldValue.delete';\n    return new FieldValue(delegate);\n  }\n\n  static arrayUnion(...elements: unknown[]): FieldValue {\n    const delegate = arrayUnion(...elements);\n    delegate._methodName = 'FieldValue.arrayUnion';\n    return new FieldValue(delegate);\n  }\n\n  static arrayRemove(...elements: unknown[]): FieldValue {\n    const delegate = arrayRemove(...elements);\n    delegate._methodName = 'FieldValue.arrayRemove';\n    return new FieldValue(delegate);\n  }\n\n  static increment(n: number): FieldValue {\n    const delegate = increment(n);\n    delegate._methodName = 'FieldValue.increment';\n    return new FieldValue(delegate);\n  }\n\n  constructor(readonly _delegate: FieldValue1) {}\n\n  isEqual(other: FieldValue): boolean {\n    return this._delegate.isEqual(other._delegate);\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp } from '@firebase/app-compat';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport {\n  FirebaseFirestore,\n  CACHE_SIZE_UNLIMITED,\n  GeoPoint,\n  Timestamp\n} from '../exp/index'; // import from the exp public API\nimport { Blob } from '../src/api/blob';\nimport {\n  Firestore,\n  Transaction,\n  CollectionReference,\n  DocumentReference,\n  DocumentSnapshot,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  WriteBatch,\n  setLogLevel\n} from '../src/api/database';\nimport { FieldPath } from '../src/api/field_path';\nimport { FieldValue } from '../src/api/field_value';\n\nconst firestoreNamespace = {\n  Firestore,\n  GeoPoint,\n  Timestamp,\n  Blob,\n  Transaction,\n  WriteBatch,\n  DocumentReference,\n  DocumentSnapshot,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  CollectionReference,\n  FieldPath,\n  FieldValue,\n  setLogLevel,\n  CACHE_SIZE_UNLIMITED\n};\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'firestore-compat': Firestore;\n  }\n}\n\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerComponent.\n *\n * @param firebase - The FirebaseNamespace to register Firestore with\n * @param firestoreFactory - A factory function that returns a new Firestore\n *    instance.\n */\nexport function configureForFirebase(\n  firebase: FirebaseNamespace,\n  firestoreFactory: (\n    app: FirebaseApp,\n    firestoreExp: FirebaseFirestore\n  ) => Firestore\n): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'firestore-compat',\n      container => {\n        const app = container.getProvider('app-compat').getImmediate()!;\n        const firestoreExp = container\n          .getProvider('firestore-exp')\n          .getImmediate()!;\n        return firestoreFactory(app, firestoreExp);\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({ ...firestoreNamespace })\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app-compat';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport * as types from '@firebase/firestore-types';\n\nimport { Firestore, IndexedDbPersistenceProvider } from '../src/api/database';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { registerBundle } from './bundle';\nimport { configureForFirebase } from './config';\nimport { name, version } from './package.json';\n\nimport '../register-module';\n\n/**\n * Registers the main Firestore build with the components framework.\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\n */\nexport function registerFirestore(instance: FirebaseNamespace): void {\n  setSDKVersion(instance.SDK_VERSION);\n  configureForFirebase(\n    instance,\n    (app, firestoreExp) =>\n      new Firestore(app, firestoreExp, new IndexedDbPersistenceProvider())\n  );\n  instance.registerVersion(name, version);\n}\n\nregisterFirestore((firebase as unknown) as FirebaseNamespace);\nregisterBundle(Firestore);\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    firestore: {\n      (app?: FirebaseApp): types.FirebaseFirestore;\n      Blob: typeof types.Blob;\n      CollectionReference: typeof types.CollectionReference;\n      DocumentReference: typeof types.DocumentReference;\n      DocumentSnapshot: typeof types.DocumentSnapshot;\n      FieldPath: typeof types.FieldPath;\n      FieldValue: typeof types.FieldValue;\n      Firestore: typeof types.FirebaseFirestore;\n      GeoPoint: typeof types.GeoPoint;\n      Query: typeof types.Query;\n      QueryDocumentSnapshot: typeof types.QueryDocumentSnapshot;\n      QuerySnapshot: typeof types.QuerySnapshot;\n      Timestamp: typeof types.Timestamp;\n      Transaction: typeof types.Transaction;\n      WriteBatch: typeof types.WriteBatch;\n      setLogLevel: typeof types.setLogLevel;\n    };\n  }\n  interface FirebaseApp {\n    firestore?(): types.FirebaseFirestore;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}