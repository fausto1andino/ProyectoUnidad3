{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faust\\\\Desktop\\\\PrograWebTG3\\\\src\\\\Context\\\\MovieContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MovieContext = /*#__PURE__*/createContext();\nexport const MovieState = ({\n  children\n}) => {\n  _s();\n\n  const [hiddenMenu, setHiddenMenu] = useState(true);\n  const [activeLink, setActiveLink] = useState(\"Popular\");\n  const [showPagination, setShowPagination] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [movies, setMovies] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [popularMovies, setPopularMovies] = useState([]);\n  const API_KEY = \"90a38cc37c7098cea40e9a9cfe7b191d\";\n\n  const getMovies = async () => {\n    const response = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=${currentPage}`);\n    const data = await response.json();\n\n    if (search.trim() === \"\") {\n      setMovies(data);\n    }\n  };\n\n  const handleSearch = async e => {\n    e.preventDefault();\n\n    if (search.trim() === \"\") {\n      return;\n    }\n\n    const searchResponse = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${search}&page=${currentPage}`);\n    const searchData = await searchResponse.json();\n    setMovies(searchData);\n    setShowPagination(false);\n  };\n\n  const newPage = direction => {\n    if (direction === \"next\") {\n      setCurrentPage(currentPage + 1);\n      setIsLoading(true);\n    } else if (direction === \"previous\" && currentPage !== 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  const getPopularMovies = async () => {\n    const popularMoviesResponse = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=3`);\n    const popularMoviesData = await popularMoviesResponse.json();\n    setPopularMovies(popularMoviesData);\n  };\n\n  useEffect(() => {\n    getPopularMovies();\n  }, []);\n  useEffect(() => {\n    if (search.trim() === \"\") {\n      setShowPagination(true);\n    }\n\n    getMovies();\n  }, [search, currentPage]);\n  useEffect(() => {\n    const loadingTimeout = setTimeout(() => {\n      setIsLoading(false);\n    }, 1300);\n    return () => clearTimeout(loadingTimeout);\n  }, [movies, currentPage]);\n  return /*#__PURE__*/_jsxDEV(MovieContext.Provider, {\n    value: {\n      movies,\n      setMovies,\n      search,\n      setSearch,\n      activeLink,\n      setActiveLink,\n      handleSearch,\n      currentPage,\n      setCurrentPage,\n      newPage,\n      showPagination,\n      setShowPagination,\n      isLoading,\n      setIsLoading,\n      popularMovies,\n      setPopularMovies,\n      hiddenMenu,\n      setHiddenMenu\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MovieState, \"iOMsGiGxnWOTH1z+VqU/n5rZ4xc=\");\n\n_c = MovieState;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieState\");","map":{"version":3,"sources":["C:/Users/faust/Desktop/PrograWebTG3/src/Context/MovieContext.js"],"names":["React","useState","createContext","useEffect","MovieContext","MovieState","children","hiddenMenu","setHiddenMenu","activeLink","setActiveLink","showPagination","setShowPagination","isLoading","setIsLoading","movies","setMovies","search","setSearch","currentPage","setCurrentPage","popularMovies","setPopularMovies","API_KEY","getMovies","response","fetch","data","json","trim","handleSearch","e","preventDefault","searchResponse","searchData","newPage","direction","getPopularMovies","popularMoviesResponse","popularMoviesData","loadingTimeout","setTimeout","clearTimeout"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useEffect } from \"react\";\n\nexport const MovieContext = createContext();\n\nexport const MovieState = ({ children }) => {\n\n  const [hiddenMenu, setHiddenMenu] = useState(true);\n\n  const [activeLink, setActiveLink] = useState(\"Popular\");\n\n  const [showPagination, setShowPagination] = useState(true);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [movies, setMovies] = useState([]);\n\n  const [search, setSearch] = useState(\"\");\n \n  const [currentPage, setCurrentPage] = useState(1);\n\n  const [popularMovies, setPopularMovies] = useState([]);\n\n  const API_KEY = \"90a38cc37c7098cea40e9a9cfe7b191d\";\n\n  const getMovies = async () => {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=${currentPage}`\n    );\n    const data = await response.json();\n    if (search.trim() === \"\") {\n      setMovies(data);\n    }\n  };\n\n  const handleSearch = async (e) => {\n    e.preventDefault();\n    if (search.trim() === \"\") {\n      return;\n    }\n    const searchResponse = await fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${search}&page=${currentPage}`\n    );\n    const searchData = await searchResponse.json();\n    setMovies(searchData);\n    setShowPagination(false);\n  };\n\n  const newPage = (direction) => {\n    if (direction === \"next\") {\n      setCurrentPage(currentPage + 1);\n      setIsLoading(true);\n    } else if (direction === \"previous\" && currentPage !== 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  const getPopularMovies = async () => {\n    const popularMoviesResponse = await fetch(\n      `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=3`\n    );\n    const popularMoviesData = await popularMoviesResponse.json();\n    setPopularMovies(popularMoviesData);\n  };\n\n  useEffect(() => {\n    getPopularMovies();\n  }, []);\n\n  useEffect(() => {\n    if (search.trim() === \"\") {\n      setShowPagination(true);\n    }\n    getMovies();\n  }, [search, currentPage]);\n\n  useEffect(() => {\n    const loadingTimeout = setTimeout(() => {\n      setIsLoading(false);\n    }, 1300);\n    return () => clearTimeout(loadingTimeout);\n  }, [movies, currentPage]);\n\n  return (\n    <MovieContext.Provider\n      value={{\n        movies,\n        setMovies,\n        search,\n        setSearch,\n        activeLink,\n        setActiveLink,\n        handleSearch,\n        currentPage,\n        setCurrentPage,\n        newPage,\n        showPagination,\n        setShowPagination,\n        isLoading,\n        setIsLoading,\n        popularMovies,\n        setPopularMovies,\n        hiddenMenu,\n        setHiddenMenu,\n      }}\n    >\n      {children}\n    </MovieContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}